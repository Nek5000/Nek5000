#!/usr/bin/env python2

"""
Takes stdin or a filename and parses FORTRAN variable assignments.  Prints a new-style SIZE file to stdout

To use:
    $ parseSize.py location/of/SIZE > destination/of/new/SIZE
or
    $ cat location/of/SIZE | parseSize.py > destination/of/new/SIZE

This usage is intended to be UNIX-like and to prevent users from accidentally clobbering their SIZE file.

"""

import fileinput
import re
import sys

def getSizeParams(files=None):
    """ Parse variable assignments from a Nek5000 SIZE file.

    This is intended to be used for Nek5000 SIZE files but may work for other FORTRAN source files.

    :param files: May be a list of filenames to parse sequentially.
            * If None, then takes filenames from sys.argv[1:].
            * If None and if sys.argv[1:] is None, then takes contents of stdin
    :return:  A dict of {variable : value} pairs.  All variables are forced to lowercase.  All values are strings.
    """
    params = {}
    for line in fileinput.input(files):
        if not line.startswith(('c', 'C')):
            for m in re.finditer(r'\b(?P<name>\w+)\b *= *(?P<value>(?:[a-z0-9\+\-\*/ \t]+|\([a-z0-9\+\-\*/ \t]+\))+)', line, re.I):
                params[m.group('name').lower().strip()] = m.group('value').lower().strip()
    return params


def writeSizeParams(inputParams, template="", defaultParams=None):
    """ Write variable assignments to a new-style Nek5000 SIZE file format

    The resultant SIZE file is printed to stdout.  The user may redirect it on the command line

    :param inputParams: A dict of {variable: value} pairs
    :param template: A string for the size file.  Uses the Python string-formatting mini-language for substitutions
    :param defaultParams: A dict of default {variable: value} pairs to use if variable is not specified in inputParams
    """

    # Default SIZE template file, copied from core/SIZE.template
    if not template:
        template = """
c     Automatically generated by convert_size.py
c
c     Include file to dimension static arrays
c     and to set some hardwired run-time parameters
c
      integer ldim,lx1,lxd,lx2,lx1m,lelg,lp,lelt,ldimt
      integer ax1,ax2,lpx1,lpx2,lpelt,lbx1,lbx2,lbelt
      integer toteq
      integer lcvx1,lcvelt
      integer lelx,lely,lelz,mxprev,lgmres,lorder,lhis
      integer maxobj,maxmbr,lpert,nsessmax,nmaxl,nfldmax,nmaxcom

      ! GENERAL
      parameter (ldim={ldim})        ! domain dimension
      parameter (lx1={lx1})         ! polynomial order; in 2D set lz1=1
      parameter (lxd={lxd})        ! polynomial order for over-integration
      parameter (lx2={lx2})     ! polynomial order for pressure
      parameter (lx1m={lx1m})        ! polynomial order mesh solver; =1 no mesh motion

      parameter (lelg={lelg})     ! max total number of elements
      parameter (lp={lp})       ! max number of MPI ranks
      parameter (lelt={lelt})      ! max number of elements per MPI rank
      parameter (ldimt={ldimt})       ! max number of auxiliary fields (temperature + scalars)

      ! OPTIONAL
      parameter (lelx={lelx},lely={lely},lelz={lelz})          ! global tensor mesh dimensions
      parameter (ax1={ax1},ax2={ax2})                   ! averages
      parameter (lbx1={lbx1},lbx2={lbx2},lbelt={lbelt})         ! mhd
      parameter (lpx1={lpx1},lpx2={lpx2},lpelt={lpelt},lpert={lpert}) ! linear stability
      parameter (toteq={toteq})                       ! cmt
      parameter (lcvx1={lcvx1},lcvelt={lcvelt})              ! cvode

      parameter (mxprev={mxprev},lgmres={lgmres})           ! projection + Krylov space dimension
      parameter (lorder={lorder})                      ! upper limit for order in time
      parameter (lhis={lhis})                      ! max intp points per MPI rank
      parameter (maxobj={maxobj},maxmbr={maxmbr})        ! max number number of objects
      parameter (nsessmax={nsessmax},nmaxl={nmaxl},nfldmax={nfldmax},nmaxcom={nmaxcom}) ! multimesh parameters

      ! INTERNALS
      include 'SIZE.inc'
"""

    if not defaultParams:
        # Default parameter
        defaultParams = dict(
            ldim     = 3,
            lx1      = 8,
            lxd      = 10,
            lx2      = 'lx1-2',
            lx1m     = 1,
            lelg     = 5000,
            lp       = 1024,
            lelt     = 600,
            ldimt    = 1,
            lelx     = 1,
            lely     = 1,
            lelz     = 1,
            ax1      = 1,
            ax2      = 1,
            lbx1     = 1,
            lbx2     = 1,
            lbelt    = 1,
            lpx1     = 1,
            lpx2     = 1,
            lpelt    = 1,
            lpert    = 1,
            toteq    = 1,
            lcvx1    = 1,
            lcvelt   = 1,
            mxprev   = 20,
            lgmres   = 30,
            lorder   = 3,
            lhis     = 100,
            maxobj   = 4,
            maxmbr   = 'lelt*6',
            nsessmax = 1,
            nmaxl    = 1,
            nfldmax  = 1,
            nmaxcom  = 1,
        )

    # First, set output parameters to all defaults
    # Then, update defaults with any input parameters
    # Finally, notify user of the updates
    outputParams = defaultParams.copy()
    outputParams.update(inputParams)
    updatedParams = outputParams.viewitems() - inputParams.viewitems()
    if updatedParams:
        sys.stderr.write("Some required parameters were missing from the input SIZE file.  "
                         "The following defaults will be used: ")
        sys.stderr.writelines(["{0} = {1}, ".format(k, v) for (k,v) in updatedParams])
        sys.stderr.write("\n")

    # Notify user of any input parameters that were ignored
    ignoredParams = inputParams.viewkeys() - defaultParams.viewkeys()
    if ignoredParams:
        sys.stderr.write("Some parameters from input SIZE file were ignored: ")
        sys.stderr.writelines("{0}, ".format(k) for k in ignoredParams)
        sys.stderr.write("\n")

    # Finally, update template and write to stdout
    print template.format(**outputParams)


if __name__ == '__main__':
    p = getSizeParams()
    writeSizeParams(p)
