C-----------------------------------------------------------------------
C  nek5000 user-file template
C
C  user specified routines:
C     - userbc : boundary conditions
C     - useric : initial conditions
C     - uservp : variable properties
C     - userf  : local acceleration term for fluid
C     - userq  : local source term for scalars
C     - userchk: general purpose routine for checking errors etc.
C
C-----------------------------------------------------------------------
      subroutine uservp(ix,iy,iz,eg) ! set variable properties
      include 'SIZE'
      include 'TOTAL'
      include 'NEKUSE'

      integer e,f,eg
c     e = gllel(eg)

      udiff  = 0.0
      utrans = 0.0

      return
      end
c-----------------------------------------------------------------------
      subroutine userf(ix,iy,iz,eg) ! set acceleration term
c
c     Note: this is an acceleration term, NOT a force!
c     Thus, ffx will subsequently be multiplied by rho(x,t).
c
      include 'SIZE'
      include 'TOTAL'
      include 'NEKUSE'

      integer e,f,eg
c     e = gllel(eg)

      ffx = 0.0
      ffy = 0.0
      ffz = 0.0

      return
      end
c-----------------------------------------------------------------------
      subroutine userq(ix,iy,iz,eg) ! set source term
      include 'SIZE'
      include 'TOTAL'
      include 'NEKUSE'

      integer e,f,eg
c     e = gllel(eg)

      qvol   = 0.0
      source = 0.0

      return
      end
c-----------------------------------------------------------------------
      subroutine userbc(ix,iy,iz,iside,ieg) ! set up boundary conditions
      include 'SIZE'
      include 'TOTAL'
      include 'NEKUSE'

c      if (cbc(iside,gllel(ieg),ifield).eq.'v01')

      ux   = 0.0
      uy   = 0.0
      uz   = 0.0
      temp = 0.0

      return
      end
c-----------------------------------------------------------------------
      subroutine useric(ix,iy,iz,ieg) ! set up initial conditions
      include 'SIZE'
      include 'TOTAL'
      include 'NEKUSE'

      ux   = 0.0
      uy   = 0.0
      uz   = 0.0
      temp = 0.0

      return
      end
c-----------------------------------------------------------------------
      subroutine userchk()
      include 'SIZE'
      include 'TOTAL'

#ifdef MOAB
      call usr_moab_output()
#endif
      return
      end
c-----------------------------------------------------------------------
      subroutine usrdat()   ! This routine to modify element vertices
      include 'SIZE'
      include 'TOTAL'

      return
      end
c-----------------------------------------------------------------------
      subroutine usrdat2()  ! This routine to modify mesh coordinates
      include 'SIZE'
      include 'TOTAL'

      return
      end
c-----------------------------------------------------------------------
      subroutine usrdat3()
      include 'SIZE'
      include 'TOTAL'

      return
      end
C=======================================================================
#ifdef MOAB
      subroutine usr_moab2nek(id_nek, id_moab)

      character*3 id_nek(1)
      integer id_moab

      id_nek(1) = 'E  '
      if     (id_moab.eq.100) then
         id_nek(1) = 'v  '
      else if(id_moab.eq.200) then
         id_nek(1) = 'O  '
      else if(id_moab.eq.300) then
         id_nek(1) = 'W  '
      endif
      return
      end

      subroutine usr_moab_output()

#define IMESH_ASSERT \
      if (ierr.ne.0) call imesh_err(ierr,imeshh,'pipe.f ',__LINE__)

#include "NEKMOAB"
      include 'TSTEP'
      include 'SOLN'
      include 'GEOM'

      integer iten, ione, ierr
      CHARACTER*10 NAME
      CHARACTER*132 options
      CHARACTER*1   NAM1(10)
      EQUIVALENCE  (NAME,NAM1)
      CHARACTER*1  NUMRL(0:9)
      DATA NUMRL          /'0','1','2','3','4','5','6','7','8','9'/
      data options /''/
      data name /'pipe00.h5m'/

c name the output files 'zero??.h5m'      
      iten = istep / 10
      ione = MOD(istep,10)
      nam1(5) = numrl(iten)
      nam1(6) = numrl(ione)

c #define MOAB_MEM
#ifndef MOAB_MEM

c copy data from nek
      do l = 1, nelv
         do k = 1, nz1
            do j = 1, ny1
               do i = 1, nx1
                  tl(i,j,k,l,1) = t(i,j,k,l,1)
                  xm1l(i,j,k,l) = xm1(i,j,k,l)
                  ym1l(i,j,k,l) = ym1(i,j,k,l)
                  zm1l(i,j,k,l) = zm1(i,j,k,l)
                  vxl(i,j,k,l) = vx(i,j,k,l)
                  vyl(i,j,k,l) = vy(i,j,k,l)
                  vzl(i,j,k,l) = vz(i,j,k,l)
               enddo
            enddo
         enddo
      enddo
      if (nx2.eq.nx1 .and. ny2.eq.ny1 .and. nz2.eq.nz1) then
         do l = 1, lelt
            do k = 1, nz1
               do j = 1, ny1
                  do i = 1, nx1
                     prl(i,j,k,l) = pr(i,j,k,l)
                  enddo
               enddo
            enddo
         enddo
      endif
#endif

      if(mod(istep,iostep) .eq. 0) then
c         call iMesh_save(%VAL(imeshh),%VAL(rootset),name,options, ierr)
c         IMESH_ASSERT
      endif

      return
      end
#endif
c-----------------------------------------------------------------------
