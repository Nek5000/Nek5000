c-----------------------------------------------------------------------
      subroutine exact(uu,vv,xx,yy,n,time,visc,u0,v0)
c
c     This routine creates initial conditions for an exact solution
c     to the Navier-Stokes equations based on the paper of Walsh [1],
c     with an additional translational velocity (u0,v0).
c     
c     The computational domain is [0,2pi]^2 with doubly-periodic 
c     boundary conditions.
c     
c     Walsh's solution consists of an array of vortices determined 
c     as a linear combinations of eigenfunctions of having form:
c     
c         cos(pi m x)cos(pi n y), cos(pi m x)sin(pi n y)
c         sin(pi m x)cos(pi n y), sin(pi m x)sin(pi n y)
c     
c     and
c
c         cos(pi k x)cos(pi l y), cos(pi k x)sin(pi l y)
c         sin(pi k x)cos(pi l y), sin(pi k x)sin(pi l y)
c     
c     While there are constraints on admissible (m,n),(k,l)
c     pairings, Walsh shows that there is a large class of
c     possible pairings that give rise to very complex vortex
c     patterns.
c     
c     Walsh's solution applies either to unsteady Stokes or 
c     unsteady Navier-Stokes.  The solution is a non-translating
c     decaying array of vortices that decays at the rate 
c
c          exp ( -4 pi^2 (m^2+n^2) visc time ),
c
c     with (m^2+n^2) = (k^2+l^2). A nearly stationary state may
c     be obtained by taking the viscosity to be extremely small,
c     so the effective decay is negligible.   This limit, however,
c     leads to an unstable state, thus diminsishing the value of 
c     Walsh's solution as a high-Reynolds number test case.
c
c     It is possible to extend Walsh's solution to a stable convectively-
c     dominated case by simulating an array of vortices that translate
c     at arbitrary speed by adding a constant to the initial velocity field.  
c     This approach provides a good test for convection-diffusion dynamics.
c     
c     The approach can also be extended to incompressible MHD with unit
c     magnetic Prandtl number Pm.
c     
c [1] Owen Walsh, "Eddy Solutions of the Navier-Stokes Equations,"
c     in The Navier-Stokes Equations II - Theory and Numerical Methods,
c     Proceedings, Oberwolfach 1991, J.G. Heywood, K. Masuda,
c     R. Rautmann,  S.A. Solonnikov, Eds., Springer-Verlag, pp. 306--309
c     (1992).
c
c     2/23/02; 6/2/09;  pff
c
c
      include 'SIZE'
      include 'INPUT'
c
      real uu(n),vv(n),xx(n),yy(n)
c
      real cpsi(2,5), a(2,5)
      save cpsi     , a

c     data a / .4,.45 , .4,.2 , -.2,-.1 , .2,.05, -.09,-.1 / ! See eddy.m
c     data cpsi / 0,65 , 16,63 , 25,60 , 33,56 , 39,52 /     ! See squares.f
c     data cpsi / 0,85 , 13,84 , 36,77 , 40,75 , 51,68 /


c     This data from Walsh's Figure 1 [1]:

      data a / -.2,-.2, .25,0.,   0,0  ,  0,0  ,  0,0  /
      data cpsi / 0, 5 ,  3, 4 ,  0,0  ,  0,0  ,  0,0  /

      one   = 1.
      pi    = 4.*atan(one)

      aa    = cpsi(2,1)**2
      arg   = -visc*time*aa  ! domain is [0:2pi]
      e     = exp(arg)
c
c     ux = psi_y,  uy = -psi_x
c
      do i=1,n
         x = xx(i) - u0*time
         y = yy(i) - v0*time

         sx = sin(cpsi(2,1)*x)
         cx = cos(cpsi(2,1)*x)
         sy = sin(cpsi(2,1)*y)
         cy = cos(cpsi(2,1)*y)
         u  =  a(1,1)*cpsi(2,1)*cy 
         v  =  a(2,1)*cpsi(2,1)*sx

         do k=2,5
            s1x = sin(cpsi(1,k)*x)
            c1x = cos(cpsi(1,k)*x)
            s2x = sin(cpsi(2,k)*x)
            c2x = cos(cpsi(2,k)*x)

            s1y = sin(cpsi(1,k)*y)
            c1y = cos(cpsi(1,k)*y)
            s2y = sin(cpsi(2,k)*y)
            c2y = cos(cpsi(2,k)*y)
            
            c1  = cpsi(1,k)
            c2  = cpsi(2,k)

            if (k.eq.2) u = u + a(1,k)*s1x*c2y*c2
            if (k.eq.2) v = v - a(1,k)*c1x*s2y*c1
            if (k.eq.2) u = u - a(2,k)*s2x*c1y*c1
            if (k.eq.2) v = v + a(2,k)*c2x*s1y*c2

            if (k.eq.3) u = u - a(1,k)*s1x*c2y*c2
            if (k.eq.3) v = v + a(1,k)*c1x*s2y*c1
            if (k.eq.3) u = u - a(2,k)*c2x*c1y*c1
            if (k.eq.3) v = v - a(2,k)*s2x*s1y*c2

            if (k.eq.4) u = u + a(1,k)*c1x*c2y*c2
            if (k.eq.4) v = v + a(1,k)*s1x*s2y*c1
            if (k.eq.4) u = u + a(2,k)*c2x*c1y*c1
            if (k.eq.4) v = v + a(2,k)*s2x*s1y*c2

            if (k.eq.5) u = u - a(1,k)*s1x*c2y*c2
            if (k.eq.5) v = v + a(1,k)*c1x*s2y*c1
            if (k.eq.5) u = u - a(2,k)*s2x*c1y*c1
            if (k.eq.5) v = v + a(2,k)*c2x*s1y*c2
         enddo
         uu(i) = u*e + u0
         vv(i) = v*e + v0
      enddo

      return
      end
c-----------------------------------------------------------------------
      subroutine uservp (ix,iy,iz,ieg)
      include 'SIZE'
      include 'TOTAL'
      include 'NEKUSE'
C
      udiff =0.
      utrans=0.
      return
      end
c-----------------------------------------------------------------------
      subroutine userf  (ix,iy,iz,ieg)
      include 'SIZE'
      include 'TOTAL'
      include 'NEKUSE'
C
      ffx = 0.0
      ffy = 0.0
      ffz = 0.0
      return
      end
c-----------------------------------------------------------------------
      subroutine userq  (ix,iy,iz,ieg)
      include 'SIZE'
      include 'TOTAL'
      include 'NEKUSE'
C
      qvol   = 0.0
      source = 0.0
      return
      end
c-----------------------------------------------------------------------
      subroutine userchk
      include 'SIZE'  
      include 'TOTAL' 
c
      common /exacu/ ue(lx1,ly1,lz1,lelt),ve(lx1,ly1,lz1,lelt)
      common /exacd/ ud(lx1,ly1,lz1,lelt),vd(lx1,ly1,lz1,lelt)
      real, external :: glmax, glmin 
      real:: umax, vmax, wmax

      ifield = 1  ! for outpost

      n    = nx1*ny1*nz1*nelv
      visc = param(2)
      u0   = param(96)
      v0   = param(97)
      call exact  (ue,ve,xm1,ym1,n,time,visc,u0,v0)
      if (istep.eq.0     ) call outpost(ue,ve,vx,pr,t,'   ')

      call sub3   (ud,ue,vx,n)
      call sub3   (vd,ve,vy,n)
      if (istep.eq.nsteps) call outpost(ud,vd,vx,pr,t,'err')

      umx = glamax(vx,n)
      vmx = glamax(vy,n)
      uex = glamax(ue,n)
      vex = glamax(ve,n)
      udx = glamax(ud,n)
      vdx = glamax(vd,n)

      if (nid.eq.0) then
          write(6,11) istep,time,udx,umx,uex,u0,'  X err'
          write(6,11) istep,time,vdx,vmx,vex,v0,'  Y err'
   11     format(i5,1p5e14.6,a7)
      endif


      if (istep.le.5) then        !  Reset velocity to eliminate 
         call copy (vx,ue,n)      !  start-up contributions to
         call copy (vy,ve,n)      !  temporal-accuracy behavior.
      endif
       
       if (mod(istep,8).eq.0) then 
       umax=glmax(vx,nx1*ny1*nz1*nelt)
       vmax=glmax(vy,nx1*ny1*nz1*nelt) 
       wmax=glmax(vz,nx1*ny1*nz1*nelt)
       if (nid == 0) then
        write(*,'(A,F12.6)') "Maxu", umax
        write(*,'(A,F12.6)') "Maxv", vmax
        write(*,'(A,F12.6)') "Maxw", wmax        
        endif        
        endif


      return
      end
c-----------------------------------------------------------------------
      subroutine userbc (ix,iy,iz,iside,ieg)
c     NOTE ::: This subroutine MAY NOT be called by every process
      include 'SIZE'
      include 'TOTAL'
      include 'NEKUSE'
      ux=0.0
      uy=0.0
      uz=0.0
      temp=0.0
      return
      end
c-----------------------------------------------------------------------
      subroutine useric (ix,iy,iz,ieg)
      include 'SIZE'
      include 'TOTAL'
      include 'NEKUSE'

      common /exacu/ ue(lx1,ly1,lz1,lelt),ve(lx1,ly1,lz1,lelt)
      common /exacd/ ud(lx1,ly1,lz1,lelt),vd(lx1,ly1,lz1,lelt)

      integer icalld
      save    icalld
      data    icalld  /0/

      n = nx1*ny1*nz1*nelv
      if (icalld.eq.0) then
         icalld = icalld + 1
         time = 0.
         u0   = param(96)
         v0   = param(97)
         call exact (ue,ve,xm1,ym1,n,time,visc,u0,v0)
      endif

      ie = gllel(ieg)
      ux=ue(ix,iy,iz,ie)
      uy=ve(ix,iy,iz,ie)
      uz=0.0
      temp=0

      return
      end
c-----------------------------------------------------------------------
      subroutine usrdat
      include 'SIZE'
      include 'TOTAL'
      integer e

      one   = 1.
      twopi = 8.*atan(one)

      do e=1,nelv   !  Rescale mesh to [0,2pi]^2
      do i=1,4      !  Assumes original domain in .rea file on [0,1]
         xc(i,e) = twopi*xc(i,e)
         yc(i,e) = twopi*yc(i,e)
      enddo 
      enddo 

c     param(66) = 4
c     param(67) = 4

      return
      end
c-----------------------------------------------------------------------
      subroutine usrdat2
      return
      end
c-----------------------------------------------------------------------
      subroutine usrdat3
      return
      end
C=======================================================================
      subroutine userq2(q) ! set source term w/ MOAB

#include "NEKMOAB"

      include 'GEOM'
      include 'TSTEP'

      common /usrparl/ ifnekalone,mbpcid
      logical          ifnekalone   ! true for compatibility when p123>0
      common /moabqv/   qvola(lx1,ly1,lz1,lelt)     ! vol. heat s. for MOAB
      integer          mbpcid

      real q(lx1*ly1*lz1,lelt)

      integer e, i, ime, ntot, nxyz
      real x, y, r, init_power_density

      nxyz = nx1*ny1*nz1
      ntot = nxyz*nelt

      if (istep .eq. 0 .or. (.not.ifcoup .and. .not.ifvcoup) ) then

         init_power_density = param(121)
         call rzero (q,ntot)
         if (ifnekalone) then
           do e = 1,nelt
             do i = 1,nxyz
               x = xm1(i,1,1,e)
               y = ym1(i,1,1,e)
               r = (x-16.d0)**2 + (y-7.4019221593017583d0)**2  ! heat source region
               r = sqrt(r)

               if (2.0.le.r .and. r.le.4.0) q(i,e) = init_power_density   ! w/ clad
             enddo
           enddo
         else
           do e = 1,nelt
             do i = 1,nxyz

c .rea:         4 2 3 5 6       fluid set #4, solid set #2 3 5 6
c               1 2 3 5 6       ! imatie: fluid fuel clad crod can

               ime = imatie(e)

               if (ime.eq.2) q(i,e) = init_power_density  ! heat source in the solid -- w/ clad
             enddo
           enddo
         endif

      else

         if (ifcoup) then
            call nekMOAB_import_vars(powTag, 0, q)
         elseif (ifvcoup) then
            call nekMOAB_import_vars(vpowTag, 1, q)
         elseif (istep.lt.10) then
           write(6,*) "NEKMOAB:userq2: Not importing power density."
           write(6,*) "NEKMOAB:userq2 *** Enable IFCOUP or IFVCOUP ***"
         endif

      endif

      call compute_total_power(q)

      call copy(qvola,q,ntot)   ! for output

      return
      end

C=======================================================================

      subroutine compute_total_power(q)
      include 'SIZE'
      include 'TOTAL'

      integer ntot
      real q(lx1*ly1*lz1,lelt), bmq(lx1*ly1*lz1*lelt)

      ntot = nx1*ny1*nz1*nelt          ! Total power calculation
      call col3(bmq,q,bm1,ntot)
      qtot = glsum(bmq,ntot)
      if (nid.eq.0)  write(6,1) istep,time,qtot
    1 format (i8,1p2e15.7,' W  Qtot')

      return
      end

C=======================================================================

      subroutine usr_get_current_time(current_time)
      include 'SIZE'
      include 'TSTEP'
      real current_time
      
      integer ispert, glob_tstep
      common /usrperturbation/  ispert, glob_tstep  ! perturbation of temperature and density BC
      
      if (ispert .eq. 0) then
        current_time = 0.0
      else
        current_time = TIME
      endif
      
      print *, "[COUPE:NEK]...Getting current final time from NEK ",
     $                        current_time

      return
      end

C=======================================================================

      subroutine nekMOAB_reimport
C      implicit none
C  include "NEKMOAB"
C      include 'PARALLEL'
C      include 'GEOM'
      include 'SIZE'
      include 'TOTAL'
      include 'DOMAIN'
      include 'ZPER'
      include 'OPCTR'

      integer ierr, igeom

      call mapelpr                        ! create gllel mapping 
      call moab_geometry(xm1,ym1,zm1)     ! fill xm1,ym1,zm1
      call xml2xc                         ! fill xc,yc,zc

C      call nekMOAB_BC             ! read MOAB BCs 

C      call nekMOAB_compute_diagnostics

C     generate geometry (called after usrdat in case something changed)
      igeom=2
      call gengeom (igeom)

      if (ifmvbd) call setup_mesh_dssum ! Set up dssum for mesh (needs geom)

      call geom_reset(igeom)    ! recompute Jacobians, etc.

      call vrdsmsh          ! verify mesh topology

      return
      end  

C=======================================================================

      subroutine usr_reset_pseudo_time
      include 'SIZE'
      include 'TSTEP'

      ISTEP = 0
      LASTEP = 0
C      NSTEPS = 10

      return
      end

C=======================================================================

      subroutine setpid(ipid)

      common /usrparl/ ifnekalone,mbpcid
      logical          ifnekalone   ! true for compatibility when p123>0
      integer          mbpcid,ipid

      mbpcid=ipid

      return
      end

C=======================================================================

#ifdef MOAB
      subroutine usr_moab_output()

      implicit none
#include "NEKMOAB"
      include 'TSTEP'
      include 'PARALLEL'

      integer ierr
      CHARACTER*20 NAME, STEPSTR
      CHARACTER*132 wroptions, seroptions, paroptions
      CHARACTER*1  NUMRL(0:9)
      DATA NUMRL          /'0','1','2','3','4','5','6','7','8','9'/
      data seroptions /''/
      data paroptions /' moab:PARALLEL=WRITE_PART moab:PCOMM=1 '/
c      data paroptions /' moab:PARALLEL=WRITE_PART moab:PCOMM=0 '/
      
      integer ispert, glob_tstep
      common /usrperturbation/  ispert, glob_tstep  ! perturbation of temperature and density BC
      
      common /usrparl/ ifnekalone,mbpcid
      logical          ifnekalone   ! true for compatibility when p123>0
      integer          mbpcid

      if (np .gt. 1) then
        mbpcid=1
        if (mbpcid .ge. 0) then
          WRITE(wroptions,'(A,A,I1)')' moab:PARALLEL=WRITE_PART ',
     $        'moab:PCOMM=',mbpcid
        else
          wroptions=paroptions
        endif
        wroptions=TRIM(wroptions)
      else
        wroptions=TRIM(seroptions)
      endif

c      WRITE(STEPSTR, '(I5.5)') glob_tstep
      WRITE(STEPSTR,'(A,I5.5,A)') 'sahex',glob_tstep,'.h5m'
      NAME=TRIM(STEPSTR)

      if (ispert .eq. 0) glob_tstep = glob_tstep + 1

c copy data from nek to MOAB
      call nekMOAB_export_vars

      ierr = 0
      if(istep .eq. 0 .or. iostep .eq. 0 .or.
     $     mod(istep,iostep) .eq. 0) then
         if (np .gt. 1) then
c            call iMeshP_saveAll(%VAL(imeshh),%VAL(hPartn),%VAL(fileset),
c     $           name,wroptions,ierr)
         else
            call iMesh_save(%VAL(imeshh),%VAL(fileset),name,wroptions,
     $           ierr)
         endif
c no check for error, just print something and continue
         if (ierr .ne. 0 .and. nid .eq. 0) then
           write(6,*) 'Step:',istep,' Writing to ',
     $                   TRIM(name),' = failed. ierr=',ierr
         else if (nid .eq. 0) then
			     write(6,*) 'Step:',istep,' Writing to ',
     $                   TRIM(name),' = success'
         endif
      endif

      return
      end

#endif

c-----------------------------------------------------------------------

