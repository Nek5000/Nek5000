C-----------------------------------------------------------------------
C  nek5000 user-file template
C
C  user specified routines:
C     - userbc : boundary conditions
C     - useric : initial conditions
C     - uservp : variable properties
C     - userf  : local acceleration term for fluid
C     - userq  : local source term for scalars
C     - userchk: general purpose routine for checking errors etc.
C
C-----------------------------------------------------------------------
      subroutine uservp(ix,iy,iz,eg) ! set variable properties
      include 'SIZE'
      include 'TOTAL'
      include 'NEKUSE'

      integer e,f,eg
c     e = gllel(eg)

      if (ifield.eq.1) then
         utrans  = param(1)
         udiff   = param(2)

      else

         utrans  = param(7)        ! thermal properties
         udiff   = param(8)

         if (eg .gt. nelgv) then  ! properties in the solid
            udiff   = 0.1*param(8) ! conductivity
            utrans  = 1.0
         endif

      endif

      return
      end
c-----------------------------------------------------------------------
      subroutine userf(ix,iy,iz,eg) ! set acceleration term
c
c     Note: this is an acceleration term, NOT a force!
c     Thus, ffx will subsequently be multiplied by rho(x,t).
c
      include 'SIZE'
      include 'TOTAL'
      include 'NEKUSE'

      integer e,f,eg
c     e = gllel(eg)

      ffx = 0.0
      ffy = 0.0
      ffz = 0.0

      return
      end
c-----------------------------------------------------------------------
      subroutine userq(ix,iy,iz,eg) ! set source term
      include 'SIZE'
      include 'TOTAL'
      include 'NEKUSE'

      integer e,f,eg
c     e = gllel(eg)

c      qvol   = 0.0
c      if (eg .gt. nelgv) qvol = 1.0

      return
      end
c-----------------------------------------------------------------------
      subroutine userq2(q) ! set source term w/ MOAB
      include 'SIZE'
      include 'TOTAL'
      include 'NEKUSE'

      real q(lx1*ly1*lz1*lelt)

      ntot1 = nx1*ny1*nz1*nelv	! fluid
      do i = 1, ntot1
         q(i) = 0
      enddo

      ntot2 = nx1*ny1*nz1*nelt	! solid
      do i = ntot1+1, ntot2
         q(i) = 1
      enddo

c      write(*,*) 'mapped heating rate.'

c      if (ifcoup) then
c         call nekMOAB_import_vars(tTag, 0, q)
c      elseif (ifvcoup) then
c         call nekMOAB_import_vars(vtTag, 1, q)
c      endif

      return
      end
c-----------------------------------------------------------------------
      subroutine userbc(ix,iy,iz,iside,ieg) ! set up boundary conditions
      include 'SIZE'
      include 'TOTAL'
      include 'NEKUSE'

c      if (cbc(iside,gllel(ieg),ifield).eq.'v01')

      ux   = 0.0
      uy   = 4.0*(x+1.5)*(1.5-x)
      uz   = 0.0
      temp = 0.0

      return
      end
c-----------------------------------------------------------------------
      subroutine useric(ix,iy,iz,ieg) ! set up initial conditions
      include 'SIZE'
      include 'TOTAL'
      include 'NEKUSE'

      ux   = 0.0
      uy   = 4.0*(x+1.5)*(1.5-x)
      uz   = 0.0
      temp = 0.0

      return
      end
c-----------------------------------------------------------------------
      subroutine userchk()
      include 'SIZE'
      include 'TOTAL'
      real, external :: glmax, glmin 
      real:: umax, vmax, wmax  

      nv = nx1*ny1*nz1*nelv
      nt = nx1*ny1*nz1*nelt


      if (istep.eq.0) call outpost(vx,vy,vz,pr,t,'   ')

      if (mod(istep,10).eq.0) then
         tmax = glmax(t ,nt)
         umax = glmax(vy,nt)
         if (nid.eq.0) write(6,1) istep,time,umax,tmax
   1     format(i9,1p3e12.5,' tmax')
      endif


#ifdef MOAB
      call usr_moab_output()
#endif
       if (mod(istep,8).eq.0) then 
       umax=glmax(vx,nx1*ny1*nz1*nelt)
       vmax=glmax(vy,nx1*ny1*nz1*nelt) 
       wmax=glmax(vz,nx1*ny1*nz1*nelt)
       tmax=glmax(t,nx1*ny1*nz1*nelt)
       if (nid == 0) then
        write(*,'(A,F12.6)') "Maxu", umax
        write(*,'(A,F12.6)') "Maxv", vmax
        write(*,'(A,F12.6)') "Maxw", wmax
        write(*,'(A,F12.6)') "Maxt", tmax
        endif        
        endif
      

      return 
      end
c-----------------------------------------------------------------------
      subroutine usrdat()   ! This routine to modify element vertices
      include 'SIZE'
      include 'TOTAL'

c     call gen_rea(2)
      return
      end
c-----------------------------------------------------------------------
      subroutine usrdat2()  ! This routine to modify mesh coordinates
      include 'SIZE'
      include 'TOTAL'

      return
      end
c-----------------------------------------------------------------------
      subroutine usrdat3()
      include 'SIZE'
      include 'TOTAL'

      return
      end
C=======================================================================

      subroutine usr_get_current_time(current_time)
      include 'SIZE'
      include 'TSTEP'
      real current_time
      
      integer ispert, glob_tstep
      common /usrperturbation/  ispert, glob_tstep  ! perturbation of temperature and density BC
      
      if (ispert .eq. 0) then
        current_time = 0.0
      else
        current_time = TIME
      endif
      
      print *, "[COUPE:NEK]...Getting current final time from NEK ",
     $                        current_time

      return
      end

C=======================================================================

      subroutine nekMOAB_reimport
C      implicit none
C  include "NEKMOAB"
C      include 'PARALLEL'
C      include 'GEOM'
      include 'SIZE'
      include 'TOTAL'
      include 'DOMAIN'
      include 'ZPER'
      include 'OPCTR'

      integer ierr, igeom

      call mapelpr                        ! create gllel mapping 
      call moab_geometry(xm1,ym1,zm1)     ! fill xm1,ym1,zm1
      call xml2xc                         ! fill xc,yc,zc

C      call nekMOAB_BC             ! read MOAB BCs 

C      call nekMOAB_compute_diagnostics

C     generate geometry (called after usrdat in case something changed)
      igeom=2
      call gengeom (igeom)

      if (ifmvbd) call setup_mesh_dssum ! Set up dssum for mesh (needs geom)

      call geom_reset(igeom)    ! recompute Jacobians, etc.

      call vrdsmsh          ! verify mesh topology

      return
      end  

C=======================================================================

      subroutine usr_reset_pseudo_time
      include 'SIZE'
      include 'TSTEP'

      ISTEP = 0
      LASTEP = 0
C      NSTEPS = 10

      return
      end


C=======================================================================
#ifdef MOAB
      subroutine usr_moab_output()

      implicit none
#include "NEKMOAB"
      include 'TSTEP'
      include 'PARALLEL'

      integer iten, ione, ierr
      CHARACTER*10 NAME
      CHARACTER*132 seroptions, paroptions
      CHARACTER*1   NAM1(10)
      EQUIVALENCE  (NAME,NAM1)
      CHARACTER*1  NUMRL(0:9)
      DATA NUMRL          /'0','1','2','3','4','5','6','7','8','9'/
      data seroptions /''/
      data paroptions /' moab:PARALLEL=WRITE_PART '/
      data name /'mcjh00.h5m'/

c name the output files 'zero??.h5m'      
      iten = istep / 10
      ione = MOD(istep,10)
      nam1(5) = numrl(iten)
      nam1(6) = numrl(ione)

c #define MOAB_MEM
#ifndef MOAB_MEM
c copy data from nek to MOAB
      call nekMOAB_export_vars
#endif

      if(istep .eq. 0 .or. iostep .eq. 0 .or. 
     $     mod(istep,iostep) .eq. 0) then
         if (np .gt. 1) then
            call iMesh_save(%VAL(imeshh),%VAL(fileset),name,paroptions, 
     $           ierr)
         else
            call iMesh_save(%VAL(imeshh),%VAL(fileset),name,seroptions, 
     $           ierr)
         endif
c no check for error, just print something and continue
         if (ierr .ne. 0 .and. nid .eq. 0) then
            write(6, "('      H5M file write failed on step ', i4)") 
     *           istep
         else if (nid .eq. 0) then
            write(6, "('      Wrote MOAB H5M file for step ', i4)") 
     *           istep
         endif
      endif

      return
      end

#endif
