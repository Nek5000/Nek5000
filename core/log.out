diff --git a/core/NEKNEK b/core/NEKNEK
index 0db9009..28efa46 100644
--- a/core/NEKNEK
+++ b/core/NEKNEK
@@ -9,27 +9,27 @@ c
       integer imask(lx1,ly1,lz1,lelt)
       common /intmask/ imask 
 
-      real             valint(lx1,ly1,lz1,lelt,nfldmax)
+      real             valint(lx1,ly1,lz1,lelt,nfldmax_nn)
       common /valmask/ valint
 
       integer igeom
       common /cgeom/ igeom
 
-      real ubc(lx1,ly1,lz1,lelt,nfldmax)
+      real ubc(lx1,ly1,lz1,lelt,nfldmax_nn)
       common /mybc/ ubc
 
       integer nfld_neknek
       common /inbc/ nfld_neknek
  
-      real bdrylg(lx1*ly1*lz1*lelt,nfldmax,0:2)
+      real bdrylg(lx1*ly1*lz1*lelt,nfldmax_nn,0:2)
       common /mybd/ bdrylg
 
-      real    rst(nmaxl*ldim)
+      real    rst(nmaxl_nn*ldim)
       common /multipts_r/ rst
 
-      integer rcode(nmaxl),elid(nmaxl),proc(nmaxl)
-     $      , ilist(1,nmaxl),npoints
-      common /multipts_i/ rcode,elid,proc,ilist,npoints
+      integer rcode(nmaxl_nn),elid(nmaxl_nn)
+     $    ,proc(nmaxl_nn),ilist(1,nmaxl_nn),npoints_nn
+      common /multipts_i/ rcode,elid,proc,ilist,npoints_nn
 
       integer inth_multi2
       save    inth_multi2
diff --git a/core/SIZE.inc b/core/SIZE.inc
index 97406b7..648dbcf 100644
--- a/core/SIZE.inc
+++ b/core/SIZE.inc
@@ -102,8 +102,8 @@ c
       common/dimn/ nelv,nelt,nx1,ny1,nz1,nx2,ny2,nz2
      $ ,nx3,ny3,nz3,ndim,nfield,npert,nid,nxd,nyd,nzd
 
-      integer nmaxl,nfldmax
-      parameter 
-     $  (nmaxl=min(1+(nsessmax-1)*2*ldim*lxz*lelt,2*ldim*lxz*lelt))
-      parameter 
-     $  (nfldmax=min(1+(nsessmax-1)*(4+ldimt),4+ldimt))
+      integer nmaxl_nn,nfldmax_nn
+      parameter (nmaxl_nn=
+     $          min(1+(nsessmax-1)*2*ldim*lxz*lelt,2*ldim*lxz*lelt))
+      parameter (nfldmax_nn=
+     $          min(1+(nsessmax-1)*(ldim+1+ldimt),ldim+1+ldimt))
diff --git a/core/multimesh.f b/core/multimesh.f
index ceb7e54..31eff50 100644
--- a/core/multimesh.f
+++ b/core/multimesh.f
@@ -14,9 +14,8 @@ c-----------------------------------------------------------------------
       logical ifhigh
 
 C     nsessmax = upper limit for number of sessions
-C     nfldmax  = max number of fields to be interpolated
-C     nmaxl = max number of points at the boundary
-C     nmaxcom - not being used right now
+C     nfldmax_nn  = max number of fields to be interpolated
+C     nmaxl_nn = max number of points at the boundary
 
 
 C     Read from a file: number of sessions (nsessions), 
@@ -131,6 +130,8 @@ C-----------------------------------------------------------------------
       integer icalld
       save    icalld
       data    icalld  /0/
+c   Do some sanity checks - just once at setup
+      call nekneksanchk(1)
 C     Set interpolation flag: points with bc = 'int' get intflag=1. 
 C     Boundary conditions are changed back to 'v' or 't'.
 
@@ -140,8 +141,6 @@ C     Boundary conditions are changed back to 'v' or 't'.
          icalld = icalld + 1
       endif 
       call neknekgsync()
-c   Do some sanity checks - just once at setup
-      call nekneksanchk(1)
 
 c   Figure out the displacement for the first mesh 
       call setup_int_neknek(dxf,dyf,dzf)  !sets up interpolation for 2 meshes
@@ -161,18 +160,16 @@ C-------------------------------------------------------------
       character*3 cb
       character*2 cb2
       equivalence (cb2,cb)
-      integer e,f
+      integer j,e,f
 
 C     Set interpolation flag: points with boundary condition = 'int' 
 c     get intflag=1. 
 c
 C     Boundary conditions are changed back to 'v' or 't'.
 
-      if (ifflow) then
-         ifield = 1
-      elseif (ifheat) then
-         ifield   = 2
-      endif   
+      ifield = 1
+      if (ifheat) ifield = 2
+
 
       nfaces = 2*ndim
       nel    = nelfld(ifield)
@@ -180,18 +177,22 @@ C     Boundary conditions are changed back to 'v' or 't'.
       nflag=nel*nfaces
       call izero(intflag,nflag)
 
+      do j=1,ifield
       do e=1,nel
       do f=1,nfaces
-         cb=cbc(f,e,ifield)
+         cb=cbc(f,e,j)
          if (cb2.eq.'in') then
             intflag(f,e)=1
-            if (ifield.eq.2) cbc(f,e,ifield)='t  '
-            if (ifield.eq.1) cbc(f,e,ifield)='v  '
+            if (j.eq.2) cbc(f,e,j)='t  '
+            if (j.eq.1) cbc(f,e,j)='v  '
 c           if (cb.eq.'inp') cbc(f,e,ifield)='on ' ! Pressure
-            if (cb.eq.'inp') cbc(f,e,ifield)='o  ' ! Pressure
+c            if (cb.eq.'inp') cbc(f,e,ifield)='o  ' ! Pressure
+            if (cb.eq.'inp') cbc(f,e,j)='o  ' ! Pressure
          endif
       enddo
       enddo
+      enddo
+
 
       return
       end
@@ -201,7 +202,7 @@ c------------------------------------------------------------------------
       include 'TOTAL'
       include 'NEKNEK'
       real l2,linf
-      character*3 which_field(nfldmax+1)
+      character*3 which_field(nfldmax_nn)
 
 c     nfld_neknek is the number of fields to interpolate.
 c     nfld_neknek = 3 for just veliocities, nfld_neknek = 4 for velocities + temperature
@@ -211,7 +212,14 @@ c     nfld_neknek = 3 for just veliocities, nfld_neknek = 4 for velocities + tem
       which_field(3)='vz'
       which_field(ndim+1)='pr'
       if (nfld_neknek.gt.ndim+1) which_field(ndim+2)='t'
+c
+c     Special conditions set for flow-poro coupling
+      if(nfld_neknek.eq.1) then
+         if(session.eq.'flow') which_field(1)='pr'
+         if(session.eq.'poro') which_field(1)='vy'
+      endif
 
+      call neknekgsync()
       if (nsessions.gt.1) call get_values2(which_field)
 
       return
@@ -508,11 +516,12 @@ c-----------------------------------------------------------------------
       include 'NEKNEK'
       integer i,j,k,n
       common /nekmpi/ mid,mp,nekcomm,nekgroup,nekreal
-      integer jsend(nmaxl)
-      common /exchr/ rsend(ldim*nmaxl)
-      integer rcode_all(nmaxl),elid_all(nmaxl),proc_all(nmaxl)
-      real    dist_all(nmaxl)
-      real    rst_all(nmaxl*ldim)
+      integer jsend(nmaxl_nn)
+      common /exchr/ rsend(ldim*nmaxl_nn)
+      integer rcode_all(nmaxl_nn),elid_all(nmaxl_nn)
+      integer proc_all(nmaxl_nn)
+      real    dist_all(nmaxl_nn)
+      real    rst_all(nmaxl_nn*ldim)
       integer e,ip,iface,nel,nfaces,ix,iy,iz
       integer kx1,kx2,ky1,ky2,kz1,kz2,idx,nxyz,nxy
       integer icalld
@@ -561,9 +570,9 @@ c     points in jsend
                  rsend(ldim*(ip-1)+2)=y
                endif
 
-               if (ip.gt.nmaxl) then
+               if (ip.gt.nmaxl_nn) then
                   write(6,*) nid,
-     &            ' ABORT: nbp (current ip) too large',ip,nmaxl
+     &            ' ABORT: nbp (current ip) too large',ip,nmaxl_nn
                   call exitt
                endif
 
@@ -626,7 +635,7 @@ c     Make sure rcode_all is fine
 
  200  continue
 
-      npoints = ip
+      npoints_nn = ip
 
       call iglmax(ierror,1)
       if (ierror.eq.1) call exitt
@@ -645,7 +654,8 @@ c-----------------------------------------------------------------------
       common /scrcg/ pm1(lt),wk1(lxyz),wk2(lxyz)
 
       character*3 which_field(nfld_neknek)
-      real fieldout(nmaxl,nfldmax)
+      real fieldout(nmaxl_nn,nfldmax_nn)
+      real field(lx1*ly1*lz1*lelt)
       integer nv,nt,i,j,k,n,ie,ix,iy,iz,idx,ifld
 
       call mappr(pm1,pr,wk1,wk2)  ! Map pressure to pm1 
@@ -653,35 +663,24 @@ c-----------------------------------------------------------------------
       nv = nx1*ny1*nz1*nelv
       nt = nx1*ny1*nz1*nelt
 
+
 cccc
 c     Interpolate using findpts_eval
-      ifld = 1
-      call field_eval(fieldout(1,ifld),1,vx)
-      if (ifld.eq.nfld_neknek) goto 300
-
-      ifld = 2
-      call field_eval(fieldout(1,ifld),1,vy)
-      if (ifld.eq.nfld_neknek) goto 300
-
-      ifld = 3
-      if (ldim.eq.3) then
-       call field_eval(fieldout(1,ifld),1,vz)
-      endif
-      if (ifld.eq.nfld_neknek) goto 300
-
-      ifld = 4
-      call field_eval(fieldout(1,ifld),1,pm1)
-      if (ifld.eq.nfld_neknek) goto 300
-
-      ifld = 5
-      call field_eval(fieldout(1,ifld),1,t)
-
- 300  continue
+      do ifld=1,nfld_neknek
+        if (which_field(ifld).eq.'vx') call copy(field,vx ,nt)
+        if (which_field(ifld).eq.'vy') call copy(field,vy ,nt)
+        if (which_field(ifld).eq.'vz') call copy(field,vz ,nt)
+        if (which_field(ifld).eq.'pr') call copy(field,pm1,nt)
+        if (which_field(ifld).eq.'t' ) call copy(field,t  ,nt)
+
+        call field_eval(fieldout(1,ifld),1,field)
+      enddo
+      call neknekgsync()
          
 cccc
 c     Now we can transfer this information to valint array from which
 c     the information will go to the boundary points
-       do i=1,npoints
+       do i=1,npoints_nn
         idx = iList(1,i)
         do ifld=1,nfld_neknek
           valint(idx,1,1,1,ifld)=fieldout(i,ifld)
@@ -705,7 +704,7 @@ c     Used for findpts_eval of various fields
      &                     rcode,1,
      &                     proc,1,
      &                     elid,1,
-     &                     rst,ndim,npoints,
+     &                     rst,ndim,npoints_nn,
      &                     fieldin)
 
       return
@@ -715,10 +714,13 @@ C--------------------------------------------------------------------------
       include 'SIZE'
       include 'TOTAL'
       include 'NEKNEK'
-      integer flag
+      integer flag,nintvh(2),nintv,ninth,e,f,i,j,k
+      character*3 cb
+      character*2 cb2
+      equivalence (cb2,cb)
 c     Some sanity checks for neknek 
 
-      if (nfld_neknek.gt.nfldmax) then
+      if (nfld_neknek.gt.nfldmax_nn) then
         call exitti('Error: nfld_neknek > nfldmax:$',idsess)
       endif
 
@@ -737,7 +739,41 @@ c     Some sanity checks for neknek
        endif       
       endif
 
+      call izero(nintvh,2)
+      ifield = 1
+      if (ifheat) ifield = 2
+
+      do i=1,ifield
+      do e=1,nelt
+      do f=1,2*ndim
+         cb=cbc(f,e,i)
+         if (cb2.eq.'in') then
+           nintvh(i) = nintvh(i)+1
+         endif
+      enddo
+      enddo
+      enddo
+
+      nintv = iglsum(nintvh(1),1)
+      ninth = iglsum(nintvh(2),1)
+
+      if (ifield.eq.2) then
+      if (nfld_neknek.lt.ndim+2) then
+      if (nid.eq.0) then
+      write(6,*) 'Warning: Temperature might not be
+     $ interpolated during the run. Check nfld_neknek in usrdat'
+      if (nintv.eq.ninth) write(6,*) 'set nfld_neknek to atleast ndim+2'
+      if (nintv.eq.ninth) call exitt
+      endif
+      endif
+      endif
+
       call neknekgsync()
+
+      if (nid.eq.0) write(6,*) idsess,nfld_neknek,nfldmax_nn,
+     $  ifflow,ifheat,'Neknek log'
+c     idsess - session number
+c     nfld_neknek - fields to interpolate
       return
       end
 C--------------------------------------------------------------------------
diff --git a/short_tests/eddy_neknek/eddy_uv.usr b/short_tests/eddy_neknek/eddy_uv.usr
index 3fea719..c0cbed5 100644
--- a/short_tests/eddy_neknek/eddy_uv.usr
+++ b/short_tests/eddy_neknek/eddy_uv.usr
@@ -245,12 +245,12 @@ c     NOTE ::: This subroutine MAY NOT be called by every process
          ux = ubc(ix,iy,iz,ie,1)
          uy = ubc(ix,iy,iz,ie,2)
          uz = ubc(ix,iy,iz,ie,3)
-         if (nfld_neknek.gt.3) temp = ubc(ix,iy,iz,ie,5)
+         if (nfld_neknek.gt.3) temp = ubc(ix,iy,iz,ie,ldim+2)
       else
          ux = valint(ix,iy,iz,ie,1)
          uy = valint(ix,iy,iz,ie,2)
          uz = valint(ix,iy,iz,ie,3)
-         if (nfld_neknek.gt.3) temp = valint(ix,iy,iz,ie,5)
+         if (nfld_neknek.gt.3) temp = valint(ix,iy,iz,ie,ldim+2)
       endif
 
       end if
@@ -307,10 +307,16 @@ c     should be used for stability
 
 
 c     Set number of fields to interpolate
-c     nfld_neknek = 3 - u,v,pr 
-c     nfld_neknek = 4 - u,v,w velocitites + temperature 
+c     nfld_neknek = ndim+1 (just velocity+pressure)
+c     nfld_neknek = ndim+2 (velocity + pressure + temperature)
 
-      nfld_neknek=3
+c     nfld_neknek = 3 - u,v,pr in 2D
+c     nfld_neknek = 4 - u,v,pr,t in 2D
+
+c     nfld_neknek = 4 - u,v,w,pr in 3D 
+c     nfld_neknek = 5 - u,v,w,pr,t in 3D 
+
+      nfld_neknek=3 !just velocity+pressure 
 
 c     param(66) = 4
 c     param(67) = 4
diff --git a/tools/prenek/basics.inc b/tools/prenek/basics.inc
index 9bc7eca..ceb00f8 100644
--- a/tools/prenek/basics.inc
+++ b/tools/prenek/basics.inc
@@ -1,7 +1,7 @@
 C     Utilities to be included in all subroutines in Preprocessor Program
 C     BASICS.INC
 
-      parameter (nelm=0 500 000,nxm=7,nym=7,nzm=7,maxfld=5)
+      parameter (nelm=10 000,nxm=7,nym=7,nzm=7,maxfld=5)
       parameter (lx1=nxm,ly1=nym,lz1=nzm)
 
       PARAMETER ( MAXCRV=4,MAXIBC=4,MAXHIS=2,MPSCAL=4)
