C-----------------------------------------------------------------------
C
C  This is small 2D example of a closed domain with a moving postion.
C  The resulting isentropic flow is compared to an analytical solution.  
C
c-----------------------------------------------------------------------
      SUBROUTINE USERVP (IX,IY,IZ,ieg)

C Set user variable properties

      INCLUDE 'SIZE'   
      INCLUDE 'TOTAL'  
      INCLUDE 'NEKUSE' 

      if (ifield.eq.1) then 
         utrans = 1.0*p0th/temp
         udiff  = 1e-2
      else
         utrans = 1.0*p0th/temp
         udiff  = 1e-2 
      endif

      RETURN
      END

C=======================================================================

      SUBROUTINE USERF  (IX,IY,IZ,ieg)                

C Set user forcing function for the momentum

      INCLUDE 'SIZE'   
      INCLUDE 'TSTEP'  
      INCLUDE 'NEKUSE' 

      FFY = 0.0
      FFX = 0.0
      FFZ = 0.0

      RETURN
      END

C=======================================================================

      SUBROUTINE USERQ  (IX,IY,IZ,ieg)                

C Set user forcing function for the energy and species

      INCLUDE 'SIZE'   
      INCLUDE 'TOTAL'  
      INCLUDE 'NEKUSE' 
      
      qvol = 0.0

      RETURN
      END

C=======================================================================

      SUBROUTINE USERCHK

      INCLUDE 'SIZE'
      INCLUDE 'TOTAL'

      ifusermv = .true.                  ! define our own mesh velocity
      if (istep.eq.0) call opzero(wx,wy,wz)
      call user_mvel(time)               ! Fill mesh velocity

      call user_print_err

      RETURN
      END

C=======================================================================

      SUBROUTINE USERBC (IX,IY,IZ,ISIDE,ieg)                
c     NOTE ::: This subroutine MAY NOT be called by every process

      common /c_mybc/ omega, v_piston

C  Set user boundary conditions

      INCLUDE 'SIZE'
      INCLUDE 'TSTEP'
      INCLUDE 'NEKUSE'

      pi    = 4.*atan(1.0)
      omega = pi
      amp   = 0.5*pi
      v_pistck = amp*sin(omega*time)

      IF (IFIELD .eq. 1) THEN          ! velocity

        UX = 0.0
        UY = v_pistck    ! v_piston

      ENDIF

      return
      END   

C=======================================================================

      SUBROUTINE USERIC (IX,IY,IZ,ieg)

C   Set initial conditions

      INCLUDE 'SIZE'
      INCLUDE 'TOTAL'
      INCLUDE 'NEKUSE'

      gamma0 = 1.4
      p0th   = 1.0

      IF (IFIELD.EQ.1) THEN          ! ---------- Velocity
          UX = 0.0
          UY = 0.0
      ENDIF

      IF (IFIELD.EQ.2)               ! ---------- Temperature
     &    TEMP = 1.0 

      IF (IFIELD.EQ.3)               ! ---------- Scalar 1
     &    TEMP = 1.0 

      RETURN
      END

C=======================================================================

      subroutine usrdat

      return
      end

C=======================================================================

      subroutine usrdat2

      return
      end

C=======================================================================
      subroutine usrdat3

      return
      end
C=======================================================================
      subroutine user_mvel (time_)

      include 'SIZE'
      include 'TOTAL'

      common /c_mybc/ omega, v_piston

      n    = nx1*ny1*nz1*nelv
      ymin = glmin(ym1,n)
      ymax = glmax(ym1,n)  ! this is the separation between moving and nonmvg
      ylen = ymin-ymax

      pi    = 4.*atan(1.0)
      omega = pi
      amp   = 0.5*pi
      v_piston = amp*sin(omega*time_)

      do i=1,n  ! fill mesh velocity
         yy = ym1(i,1,1,1)
         ysc = (yy-ymax)/ylen
         wx(i,1,1,1) = 0
         wy(i,1,1,1) = ysc*v_piston
         if (if3d) wz(i,1,1,1) = 0
c         if (yy.eq.ymin) wym = wy(i,1,1,1)
      enddo

      return
      end
C-----------------------------------------------------------------------
      subroutine exact_sol (time_, volex, vpex,pex,dpdtex,qtlex,ypex)

      gam0   = 1.4
      pi     = 4.*atan(1.0)
      omega  = pi
      amp    = 0.5*pi
      areap  = 1.0
      volex0 = 1.5
      pex0   = 1.0

      vpex  = amp*sin(omega*time_)
      volex = volex0 + areap * amp * (cos(omega*time_) - 1.0) / omega
      pex   = pex0 *(volex0/volex)**gam0
      dpdtex= gam0 * pex0 * volex0**gam0 * areap*vpex/volex**(gam0+1.0)
      qtlex =( (gam0-1.0)/gam0 - 1.0 ) * dpdtex/pex
      ypex  =-0.5*( 1.0 + cos(omega*time_) )

      return
      end
c =======================================================================
      subroutine user_print_err
c
      include 'SIZE'
      include 'TOTAL'

      real glcflux

      nxyz  = nx1*ny1*nz1
      ntotv = nxyz*nelv

      termV = -1.*glcflux(vx,vy,vz)
      ypist = glmin(ym1,ntotv)

      call exact_sol (time,volex,vpex,pex,dpdtex,qtlex,ypex)

      if(nio.eq.0) write(*,'(A,6(1X,E15.7))') 'err',time,
     $   volex-volvm1,vpex-termV,pex-p0th,dpdtex-dp0thdt,ypex-ypist

      return
      end

