c-----------------------------------------------------------------------
C
C  USER SPECIFIED ROUTINES:
C
C     - boundary conditions
C     - initial conditions
C     - variable properties
C     - local acceleration for fluid (a)
C     - forcing function for passive scalar (q)
C     - general purpose routine for checking errors etc.
C
c-----------------------------------------------------------------------
      subroutine uservp (ix,iy,iz,eg)
      include 'SIZE'
      include 'TOTAL'
      include 'NEKUSE'

      integer e,f,eg
c     e = gllel(eg)

      udiff =0.
      utrans=0.
      return
      end
c-----------------------------------------------------------------------
      subroutine userf  (ix,iy,iz,eg)
      include 'SIZE'
      include 'TOTAL'
      include 'NEKUSE'

      integer e,f,eg
c     e = gllel(eg)

c     Note: this is an acceleration term, NOT a force!
c     Thus, ffx will subsequently be multiplied by rho(x,t).

      ffx = 0.0
      ffy = 0.0
      ffz = 0.0

      return
      end
c-----------------------------------------------------------------------
      subroutine userq  (ix,iy,iz,eg)
      include 'SIZE'
      include 'TOTAL'
      include 'NEKUSE'

      integer e,f,eg
c     e = gllel(eg)

      qvol   = 0.0
      source = 0.0

      return
      end
c-----------------------------------------------------------------------
      subroutine userchk
      include 'SIZE'
      include 'TOTAL'

      real uex (lx1,ly1,lz1,lelv)
     $    ,vex (lx1,ly1,lz1,lelv)
     $    ,du1 (lx1,ly1,lz1,lelv)
     $    ,du2 (lx1,ly1,lz1,lelv)
     $    ,pex (lx2,ly2,lz2,lelv)

      ntot1 = nx1*ny1*nz1*nelv
      ntot2 = nx2*ny2*nz2*nelv
      Rad = 0.5

      do i=1,ntot1
         rr = ym1(i,1,1,1)/Rad
         uex(i,1,1,1) = 1.0 - rr*rr
         vex(i,1,1,1) = 0.0
      enddo

      do i=1,ntot2
         pex(i,1,1,1) = 16.0*param(2)*(4.0-xm2(i,1,1,1))
      enddo

c  Calculate parabolic velocity difference norms
      call sub3 (du1,VX,uex,ntot1)
      dumax = glmax(du1,ntot1)

      call col3    (du2,du1,du1,ntot1)
      call col2    (du2,bm1    ,ntot1)
      du2sm= GLSUM (du2,ntot1)/ VOLVM1
      du2sm= SQRT  (du2sm)

      if (nid.eq.0 .and. lastep.eq.1) then
         write(6,2) istep,dt,time,dumax,du2sm,'err '
      endif
 2    format(i9,4e17.7,a8)

      return
      end
c-----------------------------------------------------------------------
      subroutine userbc (ix,iy,iz,iside,ieg)
c     NOTE ::: This subroutine MAY NOT be called by every process
      include 'SIZE'
      include 'TOTAL'
      include 'NEKUSE'

      ux=1-4*y*y
      uy=0.0
      uz=0.0
      temp=0.0

      return
      end
c-----------------------------------------------------------------------
      subroutine useric (ix,iy,iz,ieg)
      include 'SIZE'
      include 'TOTAL'
      include 'NEKUSE'
      ux=0.0 ! 1-4*y*y !0.0
      uy=0.0
      uz=0.0
      temp=0
      return
      end
c-----------------------------------------------------------------------
      subroutine usrdat
      include 'SIZE'
      include 'TOTAL'
c
      return
      end
c-----------------------------------------------------------------------
      subroutine usrdat2
      include 'SIZE'
      include 'TOTAL'

      if (ifsplit) then
        do iel=1,nelt
        do ifc=1,2*ndim
           if (cbc(ifc,iel,1).eq.'O  ') cbc(ifc,iel,1)='on '
        enddo
        enddo
      endif

      return
      end
c-----------------------------------------------------------------------
      subroutine usrdat3
      include 'SIZE'
      include 'TOTAL'
c
      return
      end
c-----------------------------------------------------------------------
