c-----------------------------------------------------------------------
      subroutine exact(uu,vv,xx,yy,n,time,visc,u0,v0)
c
c     This routine creates initial conditions for an exact solution
c     to the Navier-Stokes equations based on the paper of Walsh,
c     with an additional translational velocity (u0,v0).
c     
c     The computational domain is [0,2pi]^2 with doubly-periodic 
c     boundary conditions.
c
c
      include 'SIZE'
      include 'INPUT'
c
      real uu(n),vv(n),xx(n),yy(n)
c
      real cpsi(2,5), a(2,5)
      save cpsi     , a

c     data a / .4,.45 , .4,.2 , -.2,-.1 , .2,.05, -.09,-.1 / ! See eddy.m
c     data cpsi / 0,65 , 16,63 , 25,60 , 33,56 , 39,52 /     ! See squares.f
c     data cpsi / 0,85 , 13,84 , 36,77 , 40,75 , 51,68 /


c     This data from Walsh's Figure 1 [1]:

      data a / -.2,-.2, .25,0.,   0,0  ,  0,0  ,  0,0  /
      data cpsi / 0, 5 ,  3, 4 ,  0,0  ,  0,0  ,  0,0  /

      one   = 1.
      pi    = 4.*atan(one)

      aa    = cpsi(2,1)**2
      arg   = -visc*time*aa  ! domain is [0:2pi]
      e     = exp(arg)
c
c     ux = psi_y,  uy = -psi_x
c
      do i=1,n
         x = xx(i) - u0*time
         y = yy(i) - v0*time

         sx = sin(cpsi(2,1)*x)
         cx = cos(cpsi(2,1)*x)
         sy = sin(cpsi(2,1)*y)
         cy = cos(cpsi(2,1)*y)
         u  =  a(1,1)*cpsi(2,1)*cy 
         v  =  a(2,1)*cpsi(2,1)*sx

         do k=2,5
            s1x = sin(cpsi(1,k)*x)
            c1x = cos(cpsi(1,k)*x)
            s2x = sin(cpsi(2,k)*x)
            c2x = cos(cpsi(2,k)*x)

            s1y = sin(cpsi(1,k)*y)
            c1y = cos(cpsi(1,k)*y)
            s2y = sin(cpsi(2,k)*y)
            c2y = cos(cpsi(2,k)*y)
            
            c1  = cpsi(1,k)
            c2  = cpsi(2,k)

            if (k.eq.2) u = u + a(1,k)*s1x*c2y*c2
            if (k.eq.2) v = v - a(1,k)*c1x*s2y*c1
            if (k.eq.2) u = u - a(2,k)*s2x*c1y*c1
            if (k.eq.2) v = v + a(2,k)*c2x*s1y*c2

            if (k.eq.3) u = u - a(1,k)*s1x*c2y*c2
            if (k.eq.3) v = v + a(1,k)*c1x*s2y*c1
            if (k.eq.3) u = u - a(2,k)*c2x*c1y*c1
            if (k.eq.3) v = v - a(2,k)*s2x*s1y*c2

            if (k.eq.4) u = u + a(1,k)*c1x*c2y*c2
            if (k.eq.4) v = v + a(1,k)*s1x*s2y*c1
            if (k.eq.4) u = u + a(2,k)*c2x*c1y*c1
            if (k.eq.4) v = v + a(2,k)*s2x*s1y*c2

            if (k.eq.5) u = u - a(1,k)*s1x*c2y*c2
            if (k.eq.5) v = v + a(1,k)*c1x*s2y*c1
            if (k.eq.5) u = u - a(2,k)*s2x*c1y*c1
            if (k.eq.5) v = v + a(2,k)*c2x*s1y*c2
         enddo
         uu(i) = u*e + u0
         vv(i) = v*e + v0
      enddo

      return
      end
c-----------------------------------------------------------------------
      subroutine uservp (ix,iy,iz,ieg)
      include 'SIZE'
      include 'TOTAL'
      include 'NEKUSE'
C
      udiff =0.
      utrans=0.
      return
      end
c-----------------------------------------------------------------------
      subroutine userf  (ix,iy,iz,ieg)
      include 'SIZE'
      include 'TOTAL'
      include 'NEKUSE'
C
      ffx = 0.0
      ffy = 0.0
      ffz = 0.0
      return
      end
c-----------------------------------------------------------------------
      subroutine userq  (ix,iy,iz,ieg)
      include 'SIZE'
      include 'TOTAL'
      include 'NEKUSE'
C
      qvol   = 0.0
      source = 0.0
      return
      end
c-----------------------------------------------------------------------
      subroutine userchk
      include 'SIZE'  
      include 'TOTAL' 
      include 'NEKNEK'
c
      common /exacu/ ue(lx1,ly1,lz1,lelt),ve(lx1,ly1,lz1,lelt)
      common /exacd/ ud(lx1,ly1,lz1,lelt),vd(lx1,ly1,lz1,lelt)


      ifxyo = .true.
      ntot = lx1*ly1*lz1*nelv
      xmx = glmax(xm1,ntot)
      xmxg = glmax_ms(xm1,ntot)
      if (abs(xmx-xmxg).gt.1.e-5) then
       ifusermv = .true.
       do i=1,nx1*ny1*nz1*nelv
        xv = xm1(i,1,1,1)
        yv = ym1(i,1,1,1)
        zv = 0.
        call u_meshv(wxv,wyv,wzv,xv,yv,zv)
        wx(i,1,1,1) = wxv
        wy(i,1,1,1) = wyv
       enddo
      endif
      ifield = 1  ! for outpost

      n    = nx1*ny1*nz1*nelv
      visc = param(2)
      u0   = param(96)
      v0   = param(97)
      call exact  (ue,ve,xm1,ym1,n,time,visc,u0,v0)
      if (istep.eq.0     ) call outpost(ue,ve,vx,pr,t,'   ')

      call sub3   (ud,ue,vx,n)
      call sub3   (vd,ve,vy,n)
      if (istep.eq.nsteps) call outpost(ud,vd,vx,pr,t,'   ')

      umx = glamax(vx,n)
      vmx = glamax(vy,n)
      uex = glamax(ue,n)
      vex = glamax(ve,n)
      udx = glamax(ud,n)
      vdx = glamax(vd,n)

c    Global error calculation
      if (IFNEKNEK) then 
      umx_gl = glamax_ms(vx,n)
      vmx_gl = glamax_ms(vy,n)
      uex_gl = glamax_ms(ue,n)
      vex_gl = glamax_ms(ve,n)
      udx_gl = glamax_ms(ud,n)
      vdx_gl = glamax_ms(vd,n)
      end if  


      if (nid.eq.0) then
          write(6,11) istep,time,udx,umx,uex,u0,'  X err', session
          write(6,11) istep,time,vdx,vmx,vex,v0,'  Y err', session
      end if
      call nekgsync
      if (nid_global.eq.0) then	  
          write(6,11) istep,time,udx_gl,umx_gl,uex_gl,u0,'  X err',
     & 'global'
          write(6,11) istep,time,vdx_gl,vmx_gl,vex_gl,v0,'  Y err',
     & 'global'
   11     format(i5,1p5e14.6,a7,2x,a9)
      endif


      if (istep.le.5) then        !  Reset velocity to eliminate 
         call copy (vx,ue,n)      !  start-up contributions to
         call copy (vy,ve,n)      !  temporal-accuracy behavior.
      endif


      return
      end
c-----------------------------------------------------------------------
      subroutine userbc (ix,iy,iz,iside,ieg)
c     NOTE ::: This subroutine MAY NOT be called by every process
      include 'SIZE'
      include 'TOTAL'
      include 'NEKUSE'
      include 'NEKNEK'

      ie = gllel(ieg)

      if (imask(ix,iy,iz,ie).eq.0) then
       if (ifusermv) call u_meshv(ux,uy,uz,x,y,z)
      else      
         ux = valint(ix,iy,iz,ie,1)
         uy = valint(ix,iy,iz,ie,2)
         uz = valint(ix,iy,iz,ie,3)
         if (nfld_neknek.gt.3) temp = valint(ix,iy,iz,ie,ldim+2)
      end if
      return
      end
c-----------------------------------------------------------------------
      subroutine useric (ix,iy,iz,ieg)
      include 'SIZE'
      include 'TOTAL'
      include 'NEKUSE'

      common /exacu/ ue(lx1,ly1,lz1,lelt),ve(lx1,ly1,lz1,lelt)
      common /exacd/ ud(lx1,ly1,lz1,lelt),vd(lx1,ly1,lz1,lelt)

      integer icalld
      save    icalld
      data    icalld  /0/

      n = nx1*ny1*nz1*nelv
      if (icalld.eq.0) then
         icalld = icalld + 1
         time = 0.
         u0   = param(96)
         v0   = param(97)
         call exact (ue,ve,xm1,ym1,n,time,visc,u0,v0)
      endif

      ie = gllel(ieg)
      ux=ue(ix,iy,iz,ie)
      uy=ve(ix,iy,iz,ie)
      uz=0.0
      temp=0

      return
      end
c-----------------------------------------------------------------------
      subroutine usrdat
      include 'SIZE'
      include 'TOTAL'
      include 'NEKNEK'
    
      ngeom = 3
      ninter = 3

      return
      end
c-----------------------------------------------------------------------
      subroutine usrdat2
      include 'SIZE'
      include 'TOTAL'

      one   = 1.
      twopi = 8.*atan(one)

      n = nx1*ny1*nz1*nelt    !  Rescale mesh to [0,2pi]^2

      call cmult(xm1,twopi,n)
      call cmult(ym1,twopi,n)

      return
      end
c----------------------------------------------------------------------
      subroutine usrdat3
      return
      end
c----------------------------------------------------------------------
      subroutine u_meshv(ux,uy,uz,x,y,z)

      pi = 4.*atan(1.)
      xc = (x-pi)
      yc = (y-pi)
      rc = sqrt(xc**2+yc**2)
      thv = atan2(yc,xc)
      omega = 2.*pi*1.
      ux = omega*rc*sin(thv)
      uy = -omega*rc*cos(thv)

      return
      end
c-----------------------------------------------------------------------
