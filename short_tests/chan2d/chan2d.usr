C
C  USER SPECIFIED ROUTINES: 
C
C     - boundary conditions 
C     - initial conditions  
C     - variable properties 
C     - forcing function for fluid (f)
C     - forcing function for passive scalar (q)
C     - general purpose routine for checking errors etc.        
C
c-----------------------------------------------------------------------
      subroutine uservp (ix,iy,iz,ieg)
      include 'SIZE'
      include 'TOTAL'
      include 'NEKUSE'

      common /Anutex/ Anut

      integer icalld
      save    icalld
      data    icalld /0/

      pi    = 4.*atan(1.0)
      ie     = gllel(ieg)
c      udiff  = ediff(ix,iy,iz,ie)
c      utrans = 1.

      if(icalld.eq.0) then
         udiff =param(2)
         utrans=param(1)  ! this is the density
      endif

      xmu = param(2)
      Amp  =0.0
      xlen =8.0
      xloc = xm1(ix,iy,iz,ie)
      yloc = ym1(ix,iy,iz,ie)
      xmu_analyt = xmu*(1.0+Anut*(1.0-yloc*yloc)
     $                *(1.0+Amp *sin(2.*pi*xloc/xlen)))

      if (ifield.eq.1) then

         utrans= param (1)  ! this is the density
         udiff = param (2)
         udiff = xmu_analyt

      elseif (ifield.eq.2) then

         utrans= param (7)  ! rhoCp
         udiff = param (8)
         udiff = xmu_analyt

      endif

      return
      end
c-----------------------------------------------------------------------
      subroutine userf  (ix,iy,iz,ieg)
      include 'SIZE'
      include 'TOTAL'
      include 'NEKUSE'

      ffx = 0.0
      ffy = 0.0
      ffz = 0.0

      return
      end
c-----------------------------------------------------------------------
      subroutine userq  (ix,iy,iz,ieg)
      include 'SIZE'
      include 'TOTAL'
      include 'NEKUSE'

      integer e,f,eg
      ie = gllel(ieg)

      if (ifield.eq.2  )        qvol = 0.0

      return
      end
c-----------------------------------------------------------------------
      subroutine userchk
      include 'SIZE'
      include 'TOTAL'


      parameter (lxyz=lx1*ly1*lz1)

      real x0(3)
      save x0

      integer icalld
      save    icalld
      data    icalld /0/

      integer icount
      save    icount

      integer e
      logical ifverbose

      ntot=nx2*ny2*nz2*nelv

      xmu = param(2)
      if (istep.lt.1) then
         do i=1,ntot
            xx = xm2(i,1,1,1)
            pr(i,1,1,1) = 2.0*(8.0-xm2(i,1,1,1))*xmu
         enddo
        call outpost2(vx,vy,vz,pr,t,ldimt,'   ')
      endif

      pi    = 4.*atan(1.0)
      rho   = 1.
      dnu   = param(2)
      delta = 1.           ! channel half height
      A_w   = 2.*pi * pi   ! wall area

      ntot = nx1*ny1*nz1*nelv

      call post_minmax

      return
      end
c-----------------------------------------------------------------------
      subroutine userbc (ix,iy,iz,iside,ieg)
      include 'SIZE'
      include 'TOTAL'
      include 'NEKUSE'

      external analyt_soln
      common /Anutex/ Anut
      real nu

      nu=param(2)
      ux=0.0
      uy=0.0
      uz=0.0
c 
      if     (ifield.eq.1) then
         uex =analyt_soln(y,nu,Anut)
         ux  = uex
      elseif (ifield.eq.2) then
         temp=1.0
      endif

      return
      end
c-----------------------------------------------------------------------
      subroutine useric (ix,iy,iz,ieg)
      include 'SIZE'
      include 'TOTAL'
      include 'NEKUSE'

      external analyt_soln
      common /Anutex/ Anut
      real nu

      integer idum
      save    idum 
      data    idum / 0 /

      if (idum.eq.0) idum = 99 + nid
      nu=param(2)

c     blunt profile w/ random perturbations
      eps = 0.0 ! .05
      uex =analyt_soln(y,nu,Anut)
      ux  = uex
      uy  = 0.0
      uz  = 0.0

      temp=0

!entire domain initialized to a reference temperature, zero velocity
! and inlet K and omega values
c ---

      if (ifield.eq.2) then
         temp=1.0
      endif

      return
      end
c-----------------------------------------------------------------------
      subroutine usrdat   ! This routine to modify element vertices
      include 'SIZE'      ! _before_ mesh is generated, which 
      include 'TOTAL'     ! guarantees GLL mapping of mesh.

      common /Anutex/ Anut

      Anut =2.0
      return
      one  = 1.
      pi   = 4.*atan(one)
      twopi= 2.*pi
      fctr  =1.0
      fctr2 =fctr*fctr

      xlen = twopi*fctr2  !  Here, map domain onto pi x [-1,1] x 2pi
      zlen = pi*fctr      !  Assume that y is already in [-1,1].

      n=8*nelv
      xmin = glmin(xc,n)
      xmax = glmax(xc,n)
      zmin = glmin(zc,n)
      zmax = glmax(zc,n)

      xscale = xlen/(xmax-xmin)
      zscale = zlen/(zmax-zmin)

      do i=1,n
         x       = xc(i,1)
         xc(i,1) = xscale*x

         z       = zc(i,1)
         zc(i,1) = zscale*z
      enddo

      return
      end
c-----------------------------------------------------------------------
      subroutine usrdat2   ! This routine to modify mesh coordinates
      include 'SIZE'
      include 'TOTAL'

      return
      end
c-----------------------------------------------------------------------
      subroutine usrdat3
      include 'SIZE'
      include 'TOTAL'

      return
      end
c-----------------------------------------------------------------------
      subroutine post_minmax
      include 'SIZE'
      include 'TOTAL'

      external analyt_soln
      parameter (lxyz=lx1*ly1*lz1)

      common/visexct/ nut(lx1,ly1,lz1,lelv)
     $               ,uex(lx1,ly1,lz1,lelv)
     $               ,dfu(lx1,ly1,lz1,lelv)
     $               ,dfe(lx1,ly1,lz1,lelv)
      common /Anutex/ Anut
      real nu

      n = nx1*ny1*nz1*nelt
      call rzero(dfe,n)
      nu=param(2)

      umax = glmax(vx,n)
      umin = glmin(vx,n)
      tmax = glmax(t ,n)
      tmin = glmin(t ,n)

      do ie = 1,nelv
      do k = 1,nz1
      do j = 1,ny1
      do i = 1,nx1
         xloc = xm1(i,j,k,ie)
         yloc = ym1(i,j,k,ie)
         nut(i,j,k,ie)=t(i,j,k,ie,1)
         uex(i,j,k,ie)=analyt_soln(yloc,nu,Anut)
         dfe(i,j,k,ie)=abs(vx(i,j,k,ie) - uex(i,j,k,ie))
c         if (xloc.le.4.0) 
c     $      dfe(i,j,k,ie)=abs(vx(i,j,k,ie) - uex(i,j,k,ie))
      enddo
      enddo
      enddo
      enddo

      dfu_max = glmax(dfe,n)

      if (nid.eq.0) then
         write(6,2) istep,dt,time,dfu_max,' X err'
 2       format(i9,3e15.5,a8)
      endif

c      if (mod(istep,iostep).eq.0 .and. istep.gt.0) then
c         call outpost2(vx ,uex,uex,dfu,t,1,'dif')
c      endif

      return
      end
c-----------------------------------------------------------------------
      real function analyt_soln(yl,nu,Anut)

      real uex, yl, nu
      external analyt_integral

      asq = 1.0 + 1.0/Anut
      cnst= LOG(asq-1.0)
      aint_ex = analyt_integral(Anut)
      ap  = 2.0*nu*Anut/( cnst - 0.5*aint_ex)

      nut  = ( 1.0+Anut*(1.0-yl*yl) ) * nu
      uex  = (ap/2.0/nu/Anut)*( LOG(asq-1.0)-LOG(asq-yl*yl) )
      analyt_soln = uex

      return
      end

      real function analyt_integral(Anut)

      a2=       1.0+1.0/Anut
      a =  sqrt(1.0+1.0/Anut)

      coef = (2.0*a)
      x1   = -1.0
      xnum1= x1
      val1 = x1*log(a2-x1*x1) + a*(log(a+x1)-log(a-x1)) - 2.0*x1
      x2   =  1.0
      xnum2= x2
      val2 = x2*log(a2-x2*x2) + a*(log(a+x2)-log(a-x2)) - 2.0*x2

      analyt_integral = val2 - val1

      return
      end
