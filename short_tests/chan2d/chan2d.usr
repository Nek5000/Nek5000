C
C  USER SPECIFIED ROUTINES: 
C
C     - boundary conditions 
C     - initial conditions  
C     - variable properties 
C     - forcing function for fluid (f)
C     - forcing function for passive scalar (q)
C     - general purpose routine for checking errors etc.        
C
c-----------------------------------------------------------------------
      subroutine uservp (ix,iy,iz,ieg)
      include 'SIZE'
      include 'TOTAL'
      include 'NEKUSE'

      common /viscmol/mul   (lx1,ly1,lz1,lelv), mul_dx(lx1,ly1,lz1,lelv)
     $               ,mul_dy(lx1,ly1,lz1,lelv), mul_dz(lx1,ly1,lz1,lelv)
      real mul, mul_dx, mul_dy, mul_dz

      ie = gllel(ieg)

      utrans = param(1) 
      udiff  = mul(ix,iy,iz,ie) 

      return
      end
c-----------------------------------------------------------------------
      subroutine userf  (ix,iy,iz,ieg)
      include 'SIZE'
      include 'TOTAL'
      include 'NEKUSE'

      common /cforce/ forcx(lx1,ly1,lz1,lelv),forcy(lx1,ly1,lz1,lelv)
     $               ,forcz(lx1,ly1,lz1,lelv)

      ie = gllel(ieg)

      ffx = forcx(ix,iy,iz,ie)
      ffy = forcy(ix,iy,iz,ie)
      ffz = forcz(ix,iy,iz,ie)

      return
      end
c-----------------------------------------------------------------------
      subroutine userq  (ix,iy,iz,ieg)
      include 'SIZE'
      include 'TOTAL'
      include 'NEKUSE'

      return
      end
c-----------------------------------------------------------------------
      subroutine userbc (ix,iy,iz,iside,ieg)
      include 'SIZE'
      include 'TOTAL'
      include 'NEKUSE'

      return
      end
c-----------------------------------------------------------------------
      subroutine useric (ix,iy,iz,ieg)
      include 'SIZE'
      include 'TOTAL'
      include 'NEKUSE'

      common /exavel/ uxex (lx1,ly1,lz1,lelv),uyex (lx1,ly1,lz1,lelv)
     $               ,uzex (lx1,ly1,lz1,lelv)

      ie = gllel(ieg)

      ux = uxex(ix,iy,iz,ie)
      uy = uyex(ix,iy,iz,ie)
      uz = uzex(ix,iy,iz,ie)

      return
      end
c-----------------------------------------------------------------------
      subroutine userchk
      include 'SIZE'
      include 'TOTAL'

      common /exavel/ uxex (lx1,ly1,lz1,lelv),uyex (lx1,ly1,lz1,lelv)
     $               ,uzex (lx1,ly1,lz1,lelv)

      common /viscmol/mul   (lx1,ly1,lz1,lelv), mul_dx(lx1,ly1,lz1,lelv)
     $               ,mul_dy(lx1,ly1,lz1,lelv), mul_dz(lx1,ly1,lz1,lelv)
      real mul, mul_dx, mul_dy, mul_dz

      common /scrns/ dv1  (lx1,ly1,lz1,lelv),
     $               diffx(lx1,ly1,lz1,lelv),
     $               diffy(lx1,ly1,lz1,lelv)

      n = nx1*ny1*nz1*nelv

      do i=1,n
        diffx(i,1,1,1) = abs(vx(i,1,1,1)-uxex(i,1,1,1))
        if (uxex(i,1,1,1).gt.1e-15) diffx(i,1,1,1) = 
     $    diffx(i,1,1,1)/uxex(i,1,1,1)
        diffy(i,1,1,1) = abs(vy(i,1,1,1)-uyex(i,1,1,1))
        if (uyex(i,1,1,1).gt.1e-15) diffy(i,1,1,1) = 
     $    diffy(i,1,1,1)/uyex(i,1,1,1)
      enddo

      difx1 = glmax(diffx,n)
      dify1 = glmax(diffy,n)

      if (nio.eq.0) 
     $   write(6,'(1p2e13.4,A)') difx1,dify1,' Linf VX VY'

c      if(ifoutfld) then
c         call outpost2(diffx,diffy,diffz,mul,t,0,'dif')
c         call outpost2(mul_dx,mul_dy,mul_dz,mul,t,0,'mul')
c      endif

      return
      end
c-----------------------------------------------------------------------
      subroutine usrdat   ! This routine to modify element vertices
      include 'SIZE'      ! _before_ mesh is generated, which 
      include 'TOTAL'     ! guarantees GLL mapping of mesh.

      return
      end
c-----------------------------------------------------------------------
      subroutine usrdat2()  ! This routine to modify mesh coordinates

      include 'SIZE'
      include 'TOTAL'

      call get_mol_visc
      call get_forcing
      call get_analsol

c      ifstrs = .false.

      return
      end
c-----------------------------------------------------------------------
      subroutine usrdat3
      include 'SIZE'
      include 'TOTAL'

      return
      end
C-----------------------------------------------------------------------
      subroutine get_mol_visc
      include 'SIZE'
      include 'TOTAL'

      common /viscmol/mul   (lx1,ly1,lz1,lelv), mul_dx(lx1,ly1,lz1,lelv)
     $               ,mul_dy(lx1,ly1,lz1,lelv), mul_dz(lx1,ly1,lz1,lelv)
      real mul, mul_dx, mul_dy, mul_dz

      Re   = 1./param(2)
      pi   = 4.0*atan(1.0)
      ampl = 1.0

      do ie=1,nelv
      do iz=1,nz1
      do iy=1,ny1
      do ix=1,nx1
        x=xm1(ix,iy,iz,ie)
        y=ym1(ix,iy,iz,ie)
        z=zm1(ix,iy,iz,ie)
        pert_mul = y
        mul(ix,iy,iz,ie)=(1./Re)*(1. + ampl*pert_mul)
      enddo
      enddo
      enddo
      enddo

      call opgrad  (mul_dx,mul_dy,mul_dz,mul)
      call opdssum (mul_dx,mul_dy,mul_dz)
      call opcolv  (mul_dx,mul_dy,mul_dz,binvm1)

      return
      end

c-----------------------------------------------------------------------
      subroutine get_analsol

      include 'SIZE'
      include 'TOTAL'

      common /exavel/ uxex (lx1,ly1,lz1,lelv),uyex (lx1,ly1,lz1,lelv)
     $               ,uzex (lx1,ly1,lz1,lelv)

      n=nx1*ny1*nz1*nelv

      U0 = 1.
      pi = 4.0*atan(1.0)
      phx= pi/2.
      phy= pi/2.

      do i=1,n
        x = xm1(i,1,1,1)
        y = ym1(i,1,1,1)
        z = zm1(i,1,1,1)
        uxex (i,1,1,1) =     U0 * cos(pi*x+phx) * sin(2.*pi*y+phy)
        uyex (i,1,1,1) =-0.5*U0 * sin(pi*x+phx) * cos(2.*pi*y+phy)
        uzex (i,1,1,1) = 0.0*U0
      enddo

      return
      end

c-----------------------------------------------------------------------
      subroutine get_forcing

      include 'SIZE'
      include 'TOTAL'

      common /cforce/ forcx(lx1,ly1,lz1,lelv),forcy(lx1,ly1,lz1,lelv)
     $               ,forcz(lx1,ly1,lz1,lelv)
      common /viscmol/mul   (lx1,ly1,lz1,lelv), mul_dx(lx1,ly1,lz1,lelv)
     $               ,mul_dy(lx1,ly1,lz1,lelv), mul_dz(lx1,ly1,lz1,lelv)
      real mul, mul_dx, mul_dy, mul_dz

      n=nx1*ny1*nz1*nelv

      U0 = 1.
      pi = 4.0*atan(1.0)
      phx= pi/2.
      phy= pi/2.

      do i=1,n
        x = xm1(i,1,1,1)
        y = ym1(i,1,1,1)
        z = zm1(i,1,1,1)

        valmu = mul   (i,1,1,1)
        dmudx = mul_dx(i,1,1,1)
        dmudy = mul_dy(i,1,1,1)
        dmudz = mul_dz(i,1,1,1)
  
        Uvec  = (2.*pi*U0   ) * sin(pi*x+phx) * sin(2.*pi*y+phy)
        Vvec  = (3.*pi*U0/2.) * cos(pi*x+phx) * cos(2.*pi*y+phy)
        Wvec  =  0.
  
        xterm =-(5.*pi**2*U0   ) * cos(pi*x+phx) * sin(2.*pi*y+phy)
        yterm = (5.*pi**2*U0/2.) * sin(pi*x+phx) * cos(2.*pi*y+phy)
        zterm =  0.

        forcx(i,1,1,1) = -xterm * valmu - (- Uvec*dmudx + Vvec * dmudy)
        forcy(i,1,1,1) = -yterm * valmu - (+ Vvec*dmudx + Uvec * dmudy)
        forcz(i,1,1,1) = -zterm * valmu
      enddo

      return
      end
c-----------------------------------------------------------------------
