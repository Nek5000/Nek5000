c-----------------------------------------------------------------------
c
c     Setup for free-surface linear-stability test problem from:
c
c     D. Giannakis, R. Rosner, P. Fischer:
c     A spectral Galerkin method for the coupled Orr-Sommerfeld and induction
c     equations for free-surface MHD 
c     J Comp. Phys. 228, p 1188-1233   (2009)
c
c
c     Re = 3.e4
c     Ohn = 3.14e-4 ;  Prg = 1.1e-4
c     We =  0.011269332539972
c     Fr = 0.091827364554637
c
c     Growth rates:
c
c     Mode 1:   0.007984943826436 - 0.175367832325744i
c     Mode 2:   0.000052447145099 - 1.177455429168827i
c
c     Here, we concider only Mode 1.
c
c     To plot error in the growth rate, at the end of the run type:
c
c        grep AMP logfile > t.a
c
c     then plot col 2 (x-axis) vs col 9 (y-axis) to see e(t),
c     where e = (gr_nl-gr_lin)/gr_lin, and gr_nl is the nonlinear
c     growth rate computed by Nek5000 and gr_lin is the growth rate
c     from linear theory.
c
c     NOTE:  Current .rea file is set for a relatively short time.
c            It is recommended to set NSTEP=200000 in the .rea file
c            to get to a final time of t=200.
c
c-----------------------------------------------------------------------
      subroutine uservp (ix,iy,iz,ieg)
      include 'SIZE'
      include 'TOTAL'
      include 'NEKUSE'

      udiff =0.
      utrans=0.

      return
      end
c-----------------------------------------------------------------------
      subroutine userf  (ix,iy,iz,ieg)

      include 'SIZE'
      include 'TOTAL'
      include 'NEKUSE'

      common /fsparam/ eps,alpha,Re,Pg,We,gamma_r,gamma_i

      ffx = 2/Re
      ffy = -(Re*Pg)**(-2)
      ffz = 0.0

      return
      end
c-----------------------------------------------------------------------
      subroutine userq  (ix,iy,iz,ieg)
      include 'SIZE'
      include 'TOTAL'
      include 'NEKUSE'
C
      qvol   = 0.0
      source = 0.0
      return
      end
c-----------------------------------------------------------------------
      subroutine userchk
      include 'SIZE'
      include 'TOTAL'
      common /outputs/ vol0,ymx0,vy20,vy2l
      common /fsarray/ ub(lx1,ly1,lz1,lelt),vb(lx1,ly1,lz1,lelt)
      common /fsparam/ eps,alpha,Re,Pg,We,gamma_r,gamma_i

      real dtmax
      save dtmax

c     call outpost(vx,vy,vz,pr,t,'   ')
c     iostep = 1000000

      n = nx1*ny1*nz1*nelv
      vol = glsum(bm1,n)
      vy2 = glsc3(vy,bm1,vy,n)/vol
      if (vy2.gt.0) vy2 = sqrt(vy2)
      ymx = glmax(ym1,n)


      if (istep.eq.0) then
         vol0 = vol
         ymx0 = ymx
         vy20 = vy2
      else
         volr = vol/vol0
         ymxr = ymx/ymx0
         vy2r = vy2/vy20
         vy2l = vy2/vy2l
         gr = log(vy2r)/time
         gl = log(vy2l)/dt
         ge = abs(gr - gamma_r)/gamma_r
         if (nid.eq.0) write(6,1) istep,time,ymx,vy2,ymxr,vy2r,gr,gl,ge
    1    format(i8,1p8e15.7,' AMP')
      endif
      vy2l = vy2

      if (istep.le.5) then
         call usrdat2 ! reset geometry & velocity to exact
         call opcopy(vx,vy,vz,ub,vb,vb)
      endif


      if (istep.eq.0) dtmax = abs(param(12))
      if (istep.eq.0) dt = dtmax/100.
      dt = dt*1.01
      dt = min(dtmax,dt)
      param(12) = -dt
      
c     NOTE:  ifusermv should be set in usrdat or usrdat2 to avoid
c            a mesh move call in useric.  It is also set here simply
c            as mnemonic.

      ifusermv = .true.   ! prescribe our own free surface motion
      call quickmv        ! move the mesh  (user affine motion)

      return
      end
c-----------------------------------------------------------------------
      subroutine userbc (ix,iy,iz,iside,ieg)
      include 'SIZE'
      include 'TOTAL'
      include 'NEKUSE'

      common /fsparam/ eps,alpha,Re,Pg,We,gamma_r,gamma_i

      ux=0.0
      uy=0.0
      uz=0.0
      temp=0.0

      sigma = We

      return
      end
c-----------------------------------------------------------------------
      subroutine useric (ix,iy,iz,eg)
      include 'SIZE'
      include 'TOTAL'
      include 'NEKUSE'

      common /fsarray/ ub(lx1,ly1,lz1,lelt),vb(lx1,ly1,lz1,lelt)
      integer e,eg

      ux=0.0
      uy=0.0
      uz=0.0
      temp=0

      e  = gllel(eg)
      ux = ub(ix,iy,iz,e)
      uy = vb(ix,iy,iz,e)

      return
      end
c-----------------------------------------------------------------------
      subroutine usrdat
      return
      end
c-----------------------------------------------------------------------
      subroutine usrdat3
      return
      end
c-----------------------------------------------------------------------
      subroutine usrdat2
      include 'SIZE'
      include 'TOTAL'
      include 'ZPER'   ! nely
      include 'CTIMER' ! icalld

      common /fsparam/ eps,alpha,Re,Pg,We,gamma_r,gamma_i
      common /fsarray/ ub(lx1,ly1,lz1,lelt),vb(lx1,ly1,lz1,lelt)
      common /xyorig/  xo(lx1*ly1*lz1*lelt),yo(lx1*ly1*lz1*lelt)
      character*3 cb
      integer e,eg,ex,ey,ez

      ifusermv = .true.   ! prescribe our own free surface motion

      Re         = 3.e4
      visc       = 1/Re
      param(2)   = visc
      cpfld(1,1) = visc 
      cpfld(1,2) = 1.0   ! density 

      Pg       = 1.1e-4
      We       =  0.011269332539972
      eps      = param(75)          ! Perturbation amplitude
      alpha    = 1.0                ! Numbers below are for alpha=1


      nelx = 6  ! must match .rea file
      nely = 10
      nelz = 1

c     Free Surface Amplitude

c     fsr    =    0.153575629311392  ! 1st mode
c     fsi    =   -0.538395071282937
c     fsr    =   -0.263978083178551  ! 2nd mode
c     fsi    =   -0.736021916821449
      fsr    =   -0.222195390880021
      fsi    =   -0.777804609119979

      gamma_r =    0.000052447145099
      gamma_i =   -1.177455429168827

      one = 1.
      pi  = 4.*atan(one)
      x0  = 0.
      x1  = 2*pi
      call rescale_x (xm1,x0,x1)

      n = nx1*ny1*nz1*nelv

      if (icalld.eq.0) then
         call copy(xo,xm1,n)
         call copy(yo,ym1,n)
      endif
      icalld = icalld+1

c     do ey=1,nely           ! UNCOMMENT to write out vertical points
c     do j=1,ny1
c        eg = 1 + (ey-1)*nelx
c        write(28,*) ym1(1,j,1,eg)
c     enddo
c     enddo
c     call exitt

      epsamp = eps*exp(gamma_r*time)

      do i=1,n   ! perurbation displacement
         x  = xo(i)
         y  = yo(i)
         ax = alpha*x + gamma_i*time
         disp = fsr*cos(ax) - fsi*sin(ax)
         yscl = 1+y   !  zero when y=-1, 1 when y = 0
         ym1(i,1,1,1) = y + epsamp*yscl*disp
      enddo

c     Set surface tension on free surface

      sigma = We  ! must be set in userbc for cb = 'ms '

      itop = 3
      if (if3d) itop = 5
      do e=1,nelv
         cb = cbc(itop,e,1) ! bc on top surface
         if (cb.eq.'MS ') bc(4,itop,e,1) = sigma
      enddo

      call gen_pert_ic

c     param(66) = 4  ! std i/o
c     param(67) = 4

      return
      end
c-----------------------------------------------------------------------
      subroutine gen_pert_ic ! perturbation i.c.s
      include 'SIZE'
      include 'TOTAL'
      include 'ZPER'   ! nely

      common /fsparam/ eps,alpha,Re,Pg,We,gamma_r,gamma_i
      common /fsarray/ ub(lx1,ly1,lz1,lelt),vb(lx1,ly1,lz1,lelt)
      common /xyorig/  xo(lx1,ly1,lz1,lelt),yo(lx1,ly1,lz1,lelt)
      common /scrns/ ur(ly1,100),ui(ly1,100),vr(ly1,100),vi(ly1,100)
      common /scruz/ wk(ly1,100)

      integer e,eg,ex,ey,ez

      call rzero(ur,ly1*100)
      call rzero(ui,ly1*100)
      call rzero(vr,ly1*100)
      call rzero(vi,ly1*100)

      m = ny1*nely
      if (nid.eq.0) then
         open(unit=98,file='u2.txt')
         do i=1,m
            read(98,*) ur(i,1),ui(i,1),vr(i,1),vi(i,1)
         enddo
         close(98)
      endif

      call gop ( ur , wk , '+  ', m ) ! gather over all procs
      call gop ( ui , wk , '+  ', m )
      call gop ( vr , wk , '+  ', m )
      call gop ( vi , wk , '+  ', m )


      n = nx1*ny1*nz1*nelv

      epsamp = eps*exp(gamma_r*time)

      do e=1,nelv
      do j=1,ny1
      do i=1,nx1
         x  = xm1(i,j,1,e)
         y  = ym1(i,j,1,e)
c        x  = xo (i,j,1,e)
c        y  = yo (i,j,1,e)
         ax = alpha*x + gamma_i*time
         c  = cos(ax)
         s  = sin(ax)
         eg = lglel(e)

         call get_exyz(ex,ey,ez,eg,nelx,nely,nelz)
         
         ub(i,j,1,e) = epsamp*(ur(j,ey)*c - ui(j,ey)*s)
         vb(i,j,1,e) = epsamp*(vr(j,ey)*c - vi(j,ey)*s)
         ubase = 1-y*y
         ub(i,j,1,e) = ub(i,j,1,e) + ubase
      enddo
      enddo
      enddo

      return
      end
c-----------------------------------------------------------------------
      subroutine set_meshv
      include 'SIZE'
      include 'TOTAL'
      include 'ZPER'   ! nely
      include 'CTIMER' ! icalld

      call quickmv2d   ! Use affine map provided for tensor-product meshes

      return
      end
c-----------------------------------------------------------------------
