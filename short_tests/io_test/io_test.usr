c-----------------------------------------------------------------------
c
c     This is small test to perform basic checks of Nek5000's I/O routines
c     Threre are four sets of tests:
c     - reading checkpoint failes for backward compatibility
c       m12io_test0.f00001 - single precision single file
c       m22io_test?.f00001 - single precision two files with nx1=10
c       m22io_test?.f00002 - single precision two files with byte swap
c       m22io_test?.f00003 - double precision two files with byte swap
c       fb2io_test.fld01   - binary .fld file
c       fa2io_test.fld01   - ascii .fld file
c     - writing and reading single .f file using mpiio
c       single precision writing/reading
c       test of the restart flags set in sioflag routine
c       double precision writing/reading testing if_full_pres option
c     - writing and reading multiple .f files
c       single precision writing/reading
c       double precision writing/reading testing if_full_pres option
c     - writing and reading .fld files
c       binary .fld writing/reading
c       ascii .fld writing/reading
c     
c     All test check corresponding restart falggs and calculate L2 norm
c     of the difference between exact and loaded value of given varialbe
c     (coordinates, velocity, temperature and passive scalars).
c
c     Current tests are performed for P_N-P_N-2 only.
c
c-----------------------------------------------------------------------
      subroutine uservp (ix,iy,iz,ieg)
      include 'SIZE'
      include 'NEKUSE'          ! UDIFF, UTRANS

c     argument list
      integer ix, iy, iz, ieg

      udiff =0.
      utrans=0.

      return
      end
c-----------------------------------------------------------------------
      subroutine userf  (ix,iy,iz,ieg)
      include 'SIZE'
      include 'NEKUSE'          ! FF[XYZ]

c     argument list
      integer ix,iy,iz,ieg
      
      ffx = 0.0
      ffy = 0.0
      ffz = 0.0
      
      return
      end
c-----------------------------------------------------------------------
      subroutine userq  (ix,iy,iz,ieg)
      include 'SIZE'
      include 'NEKUSE'          ! QVOL

c     argument list
      integer ix,iy,iz,ieg
      
      qvol   = 0.0

      return
      end
c-----------------------------------------------------------------------
      subroutine userchk
      include 'SIZE'
      include 'INPUT'           ! PARAM, NPSCAL
      include 'TSTEP'           ! ISTEP
      include 'RESTART'
      include 'PARALLEL'
      include 'GEOM'            ! IFVCOR

c     local variables
      integer ifile
      real eps4, eps8, eps_map,time_test
      parameter (eps4=1.0E-06,eps8=1.0E-12,eps_map=5.0E-04)
      character*132 fstring
      character*5 nstring
      
      time_test = pi
      ifvcor = .false.
      call fields_init
      ierr = 0

      call read_old_file_test(eps4,eps8,eps_map,ierr)

      ifile = 0
      call write_read_mpiio_file_test(ifile,eps4,eps8,ierr)

      if (mod(NP,2).eq.0) then
         call write_read_multipe_file_test(ifile,eps4,eps8,ierr)
      endif
      
      ifile = 0
      call write_read_fld_file_test(ifile,eps4,eps8,ierr)

      call read_gfldr_test(eps4,eps8,eps_map,ierr)

      if (NIO.eq.0) then
         write(*,*) ' '
         if (ierr.eq.0) then
            write(*,*) 'All I/O tests PASSED'
         else
            write(*,*) 'Some I/O test FAILED'
         endif
         write(*,*) ' '
      endif

      call exitt

      return
      end
c-----------------------------------------------------------------------
      subroutine userbc (ix,iy,iz,iside,ieg)

      include 'SIZE'
      include 'NEKUSE'          ! UX, UY, UZ, TEMP, X, Y

c     argument list
      integer ix,iy,iz,iside,ieg

c     velocity
      UX = 0.0
      UY = 0.0
      UZ = 0.0

c     temperature
      TEMP = 0.0

      return
      end
c-----------------------------------------------------------------------
      subroutine useric (ix,iy,iz,ieg)

      include 'SIZE'
      include 'NEKUSE'          ! UX, UY, UZ, TEMP, Z
      include 'INPUT'           ! IF3D, IFLDMHD
      include 'TSTEP'           ! PI, IFIELD

c     argument list
      integer ix, iy, iz, ieg

c     it is small mesh with cylindrical hole in the middle
      if (ifield.eq.1) then
         ux = sin(r*pi)*cos(2.0*theta)
         uy = cos(r*pi)*sin(4.0*theta)
         uz = 0.0
         if (IF3D) then
            ux = ux*sin(z*pi)
            uy = uy*cos(z*pi)
            uz = z*z*sin(x*pi)*cos(3.0*y*pi)
         endif
      elseif (ifield.ne.ifldmhd) then
         temp = r*cos(ifield*theta)
      endif
      
      
      return
      end
c-----------------------------------------------------------------------
c     This routine to modify element vertices
      subroutine usrdat
      include 'SIZE'
      
      return
      end
c-----------------------------------------------------------------------
      subroutine usrdat2
      include 'SIZE'

      return
      end
c-----------------------------------------------------------------------
      subroutine usrdat3
      return
      end
c-----------------------------------------------------------------------
c     routine to initilise arrays for future comparison
      subroutine fields_init

      include 'SIZE'
      include 'INPUT'
      include 'TSTEP'
      include 'GEOM'
      include 'SOLN'

c     local variables
      integer il, jl, kl, ll, nn
      real cmp_v(lx1*ly1*lz1*lelv,ldim),cmp_t(lx1*ly1*lz1*lelt,ldimt),
     $     cmp_pr(lx2*ly2*lz2*lelv), cmp_x(lx1*ly1*lz1*lelv,ldim)
      common /COMPDATA/ cmp_v, cmp_t, cmp_pr, cmp_x

!     start from setting value for pressure
      do il=1,nelv
      do jl=1,nz2
      do kl=1,ny2
      do ll=1,nx2
         pr(ll,kl,jl,il)=xm2(ll,kl,jl,il)*ym2(ll,kl,jl,il)
         if (IF3D) pr(ll,kl,jl,il) =
     $             pr(ll,kl,jl,il)*zm2(ll,kl,jl,il)
      enddo
      enddo
      enddo
      enddo

      nn =nx1*ny1*nz1*nelt
      call copy(cmp_x(1,1),xm1,nn)
      call copy(cmp_x(1,2),ym1,nn)
      if (IF3D) call copy(cmp_x(1,ndim),zm1,nn)
      
      nn =nx1*ny1*nz1*nelv
      call copy(cmp_v(1,1),vx,nn)
      call copy(cmp_v(1,2),vy,nn)
      if (IF3D) call copy(cmp_v(1,ndim),vz,nn)

      nn =nx2*ny2*nz2*nelv
      call copy(cmp_pr,pr,nn)

      do il = 1 , 1 + npscal
         nn =nx1*ny1*nz1*nelfld(il+1)
         call copy(cmp_t(1,il),t(1,1,1,1,il),nn)
      enddo

      return
      end
c-----------------------------------------------------------------------
c     routine to restore fields in SOLN arrays
      subroutine fields_restore

      include 'SIZE'
      include 'INPUT'
      include 'TSTEP'
      include 'GEOM'
      include 'SOLN'

c     local variables
      integer il, nn
      real cmp_v(lx1*ly1*lz1*lelv,ldim),cmp_t(lx1*ly1*lz1*lelt,ldimt),
     $     cmp_pr(lx2*ly2*lz2*lelv), cmp_x(lx1*ly1*lz1*lelv,ldim)
      common /COMPDATA/ cmp_v, cmp_t, cmp_pr, cmp_x
      
      nn =nx1*ny1*nz1*nelt
      call copy(xm1,cmp_x(1,1),nn)
      call copy(ym1,cmp_x(1,2),nn)
      if (IF3D) call copy(zm1,cmp_x(1,ndim),nn)
      
      nn =nx1*ny1*nz1*nelv
      call copy(vx,cmp_v(1,1),nn)
      call copy(vy,cmp_v(1,2),nn)
      if (IF3D) call copy(vz,cmp_v(1,ndim),nn)

      nn =nx2*ny2*nz2*nelv
      call copy(pr,cmp_pr,nn)

      do il = 1 , 1 + npscal
         nn =nx1*ny1*nz1*nelfld(il+1)
         call copy(t(1,1,1,1,il),cmp_t(1,il),nn)
      enddo

      return
      end
c-----------------------------------------------------------------------
c     compare fields and wite out L2 norms
c     I compare only the fileds present in the file
      subroutine fields_compare(eps)

      include 'SIZE'
      include 'INPUT'
      include 'TSTEP'
      include 'SOLN'
      include 'GEOM'
      include 'RESTART'

c     argument list
      real eps
      
c     local variables
      integer il, nn
      real l2rdiff
      real rdiff(lx1*ly1*lz1*lelt)
      common /CTMP0/ rdiff
      character*7 fieldname
      character*2 snum
      
      real cmp_v(lx1*ly1*lz1*lelv,ldim),cmp_t(lx1*ly1*lz1*lelt,ldimt),
     $     cmp_pr(lx2*ly2*lz2*lelv), cmp_x(lx1*ly1*lz1*lelv,ldim)
      common /COMPDATA/ cmp_v, cmp_t, cmp_pr, cmp_x

c     functions
      real gl2norm, gl2norm2

      if (ifgetxr.and.ifgetx) then
         nn =nx1*ny1*nz1*nelt
         
         call sub3(rdiff,cmp_x(1,1),xm1,nn)
         l2rdiff = gl2norm(rdiff,nn)
         if (l2rdiff.gt.eps.and.NIO.eq.0) then
            write(*,10) 'coord x',l2rdiff
         endif
         
         call sub3(rdiff,cmp_x(1,2),ym1,nn)
         l2rdiff = gl2norm(rdiff,nn)
         if (l2rdiff.gt.eps.and.NIO.eq.0) then
            write(*,10) 'coord y',l2rdiff
         endif

         if (IF3D) then
            call sub3(rdiff,cmp_x(1,ndim),zm1,nn)
            l2rdiff = gl2norm(rdiff,nn)
            if (l2rdiff.gt.eps.and.NIO.eq.0) then
               write(*,10) 'coord z',l2rdiff
            endif
         endif
      endif

      if (ifgetur.and.ifgetu) then
         nn =nx1*ny1*nz1*nelv
         
         call sub3(rdiff,cmp_v(1,1),vx,nn)
         l2rdiff = gl2norm(rdiff,nn)
         if (l2rdiff.gt.eps.and.NIO.eq.0) then
            write(*,10) 'vel x  ',l2rdiff
         endif
         
         call sub3(rdiff,cmp_v(1,2),vy,nn)
         l2rdiff = gl2norm(rdiff,nn)
         if (l2rdiff.gt.eps.and.NIO.eq.0) then
            write(*,10) 'vel y  ',l2rdiff
         endif

         if (IF3D) then
            call sub3(rdiff,cmp_v(1,ndim),vz,nn)
            l2rdiff = gl2norm(rdiff,nn)
            if (l2rdiff.gt.eps.and.NIO.eq.0) then
               write(*,10) 'vel z  ',l2rdiff
            endif
         endif
      endif

      if (ifgetpr.and.ifgetp) then
         nn =nx2*ny2*nz2*nelv
csk         
         call sub3(rdiff,cmp_pr,pr,nn)
         l2rdiff = gl2norm2(rdiff,nn)
         if (l2rdiff.gt.eps.and.NIO.eq.0) then
            write(*,10) 'pres   ',l2rdiff
         endif
      endif

      if (ifgettr.and.ifgett) then
         nn =nx1*ny1*nz1*nelt
         
         call sub3(rdiff,cmp_t,t,nn)
         l2rdiff = gl2norm(rdiff,nn)
         if (l2rdiff.gt.eps.and.NIO.eq.0) then
            write(*,10) 'temp   ',l2rdiff
         endif
      endif

      do il=2, 1+ npscal
         if(ifgtpsr(il-1).and.ifgtps(il-1)) then
            nn =nx1*ny1*nz1*nelfld(il+1)
            
            call sub3(rdiff,cmp_t(1,il),t(1,1,1,1,il),nn)
            l2rdiff = gl2norm(rdiff,nn)
            if (l2rdiff.gt.eps.and.NIO.eq.0) then
               write(snum,'(i2.2)') il-1
               fieldname = 'psc'//snum//'  '
               write(*,10) fieldname,l2rdiff
            endif 
         endif
      enddo

 10   format ('ERROR: field ',a7,' diff l2 norm = ',E15.7)

      return
      end
c-----------------------------------------------------------------------
c     Reading tests (old fiels for backwadr compatibility)
      subroutine read_old_file_test(eps4,eps8,eps_map,ierr)
      include 'SIZE'            !
      include 'INPUT'           ! PARAM, NPSCAL
      include 'TSTEP'           ! ISTEP, PI, IF_FULL_PRES
      include 'RESTART'
      include 'PARALLEL'

c     argument list
      real eps4,eps8,eps_map
      
c     local variables
      logical test_pass
      real time_test
      character*132 fstring
      
      time_test = pi

      test_pass = .true.
      if (NIO.eq.0) then
         write(*,*) ' '
         write(*,*) 'Testing reading of single .f file'
         write(*,*) ' '
      endif
      if_full_pres = .false.    ! pressure writing format
      param(67) = 6.0           ! file format
      time = 0.0
      fstring='m12io_test0.f00001 '
      call load_fld(fstring)
      call fields_compare(eps4)
c     check reading options (only master)
      if (NID.eq.0) then
         if (abs(time-time_test).gt.eps8) then
            test_pass = .false.
            write(*,10) 'time      : ',time
         endif
c     for mpiio number of files is equal number of processes
         if (nfiler.ne.np) then
            test_pass = .false.
            write(*,11) 'nfiler    : ',nfiler
         endif
         if (nelgr.ne.nelgt) then
            test_pass = .false.
            write(*,11) 'nelgr     : ',nelgt
         endif
         if (wdsizr.ne.4) then
            test_pass = .false.
            write(*,11) 'wdsizr    : ',wdsizr
         endif
         if (if_byte_sw) then
            test_pass = .false.
            write(*,12) 'if_byte_sw: ',if_byte_sw
         endif
         if (.not.ifgtim) then
            test_pass = .false.
            write(*,12) 'ifgtim    : ',ifgtim
         endif
         if (.not.ifgetx) then
            test_pass = .false.
            write(*,12) 'ifgetx    : ',ifgetx
         endif
         if (.not.ifgetxr) then
            test_pass = .false.
            write(*,12) 'ifgetxr   : ',ifgetxr
         endif
         if (.not.ifgetu) then
            test_pass = .false.
            write(*,12) 'ifgetu    : ',ifgetu
         endif
         if (.not.ifgetur) then
            test_pass = .false.
            write(*,12) 'ifgetur   : ',ifgetur
         endif
         if (.not.ifgetp) then
            test_pass = .false.
            write(*,12) 'ifgetp    : ',ifgetp
         endif
         if (.not.ifgetpr) then
            test_pass = .false.
            write(*,12) 'ifgetpr   : ',ifgetpr
         endif
         if (.not.ifgett) then
            test_pass = .false.
            write(*,12) 'ifgett    : ',ifgett
         endif
         if (.not.ifgettr) then
            test_pass = .false.
            write(*,12) 'ifgettr   : ',ifgettr
         endif
         if (.not.ifgtps(1)) then
            test_pass = .false.
            write(*,12) 'ifgtps1   : ',ifgtps(1)
         endif
         if (.not.ifgtpsr(1)) then
            test_pass = .false.
            write(*,12) 'ifgtpsr1  : ',ifgtpsr(1)
         endif
         if (.not.ifgtps(2)) then
            test_pass = .false.
            write(*,12) 'ifgtps2   : ',ifgtps(2)
         endif
         if (.not.ifgtpsr(2)) then
            test_pass = .false.
            write(*,12) 'ifgtpsr2  : ',ifgtpsr(2)
         endif
         if (if_full_pres) then
            test_pass = .false.
            write(*,12) 'if_full_pres : ',if_full_pres
         endif

         write(*,*) ' '
         if (test_pass) then
            write(*,*) 'PASSED'
         else
            write(*,*) 'FAILED'
            ierr = ierr + 1
         endif
         write(*,*) ' '
      endif

c     multiple files
      test_pass = .true.
      if (mod(NP,2).eq.0) then
      if (NIO.eq.0) then
         write(*,*) ' '
         write(*,*) 'Testing reading of multiple .f files'
         write(*,*) 'Testing interpolation form nx1=10 to nx1=6'
         write(*,*) ' '
      endif
      if_full_pres = .false.    ! pressure writing format
      param(67) = 6.0           ! file format
      time = 0.0
      fstring='m22io_test?.f00001 '
      call load_fld(fstring)
      call fields_compare(eps_map)
c     check reading options (only master)
      if (NID.eq.0) then
         if (abs(time-time_test).gt.eps8) then
            test_pass = .false.
            write(*,10) 'time      : ',time
         endif
         if (nfiler.ne.2) then
            test_pass = .false.
            write(*,11) 'nfiler    : ',nfiler
         endif
         if (nelgr.ne.nelgt) then
            test_pass = .false.
            write(*,11) 'nelgr     : ',nelgt
         endif
         if (wdsizr.ne.4) then
            test_pass = .false.
            write(*,11) 'wdsizr    : ',wdsizr
         endif
         if (if_byte_sw) then
            test_pass = .false.
            write(*,12) 'if_byte_sw: ',if_byte_sw
         endif
         if (.not.ifgtim) then
            test_pass = .false.
            write(*,12) 'ifgtim    : ',ifgtim
         endif
         if (.not.ifgetx) then
            test_pass = .false.
            write(*,12) 'ifgetx    : ',ifgetx
         endif
         if (.not.ifgetxr) then
            test_pass = .false.
            write(*,12) 'ifgetxr   : ',ifgetxr
         endif
         if (.not.ifgetu) then
            test_pass = .false.
            write(*,12) 'ifgetu    : ',ifgetu
         endif
         if (.not.ifgetur) then
            test_pass = .false.
            write(*,12) 'ifgetur   : ',ifgetur
         endif
         if (.not.ifgetp) then
            test_pass = .false.
            write(*,12) 'ifgetp    : ',ifgetp
         endif
         if (.not.ifgetpr) then
            test_pass = .false.
            write(*,12) 'ifgetpr   : ',ifgetpr
         endif
         if (.not.ifgett) then
            test_pass = .false.
            write(*,12) 'ifgett    : ',ifgett
         endif
         if (.not.ifgettr) then
            test_pass = .false.
            write(*,12) 'ifgettr   : ',ifgettr
         endif
         if (.not.ifgtps(1)) then
            test_pass = .false.
            write(*,12) 'ifgtps1   : ',ifgtps(1)
         endif
         if (.not.ifgtpsr(1)) then
            test_pass = .false.
            write(*,12) 'ifgtpsr1  : ',ifgtpsr(1)
         endif
         if (.not.ifgtps(2)) then
            test_pass = .false.
            write(*,12) 'ifgtps2   : ',ifgtps(2)
         endif
         if (.not.ifgtpsr(2)) then
            test_pass = .false.
            write(*,12) 'ifgtpsr2  : ',ifgtpsr(2)
         endif
         if (if_full_pres) then
            test_pass = .false.
            write(*,12) 'if_full_pres : ',if_full_pres
         endif

         write(*,*) ' '
         if (test_pass) then
            write(*,*) 'PASSED'
         else
            write(*,*) 'FAILED'
            ierr = ierr + 1
         endif
         write(*,*) ' '
      endif

c     multiple file single precision with byte swap
      test_pass = .true.
      if (NIO.eq.0) then
         write(*,*) ' '
         write(*,*) 'Testing reading of multiple .f files'
         write(*,*) 'Testing single precision with byte swap'
         write(*,*) ' '
      endif

      if_full_pres = .false.    ! pressure writing format
      param(67) = 6.0           ! file format
      time = 0.0
      fstring ='m22io_test?.f00002'
      call load_fld(fstring)
      call fields_compare(eps4)
c     check reading options (only master)
      if (NID.eq.0) then
         if (abs(time-time_test).gt.eps8) then
            test_pass = .false.
            write(*,10) 'time      : ',time
         endif
         if (nfiler.ne.2) then
            test_pass = .false.
            write(*,11) 'nfiler    : ',nfiler
         endif
         if (nelgr.ne.nelgt) then
            test_pass = .false.
            write(*,11) 'nelgr     : ',nelgt
         endif
         if (wdsizr.ne.4) then
            test_pass = .false.
            write(*,11) 'wdsizr    : ',wdsizr
         endif
         if (.not.if_byte_sw) then
            test_pass = .false.
            write(*,12) 'if_byte_sw: ',if_byte_sw
         endif
         if (.not.ifgtim) then
            test_pass = .false.
            write(*,12) 'ifgtim    : ',ifgtim
         endif
         if (.not.ifgetx) then
            test_pass = .false.
            write(*,12) 'ifgetx    : ',ifgetx
         endif
         if (.not.ifgetxr) then
            test_pass = .false.
            write(*,12) 'ifgetxr   : ',ifgetxr
         endif
         if (.not.ifgetu) then
            test_pass = .false.
            write(*,12) 'ifgetu    : ',ifgetu
         endif
         if (.not.ifgetur) then
            test_pass = .false.
            write(*,12) 'ifgetur   : ',ifgetur
         endif
         if (.not.ifgetp) then
            test_pass = .false.
            write(*,12) 'ifgetp    : ',ifgetp
         endif
         if (.not.ifgetpr) then
            test_pass = .false.
            write(*,12) 'ifgetpr   : ',ifgetpr
         endif
         if (.not.ifgett) then
            test_pass = .false.
            write(*,12) 'ifgett    : ',ifgett
         endif
         if (.not.ifgettr) then
            test_pass = .false.
            write(*,12) 'ifgettr   : ',ifgettr
         endif
         if (.not.ifgtps(1)) then
            test_pass = .false.
            write(*,12) 'ifgtps1   : ',ifgtps(1)
         endif
         if (.not.ifgtpsr(1)) then
            test_pass = .false.
            write(*,12) 'ifgtpsr1  : ',ifgtpsr(1)
         endif
         if (.not.ifgtps(2)) then
            test_pass = .false.
            write(*,12) 'ifgtps2   : ',ifgtps(2)
         endif
         if (.not.ifgtpsr(2)) then
            test_pass = .false.
            write(*,12) 'ifgtpsr2  : ',ifgtpsr(2)
         endif
         if (if_full_pres) then
            test_pass = .false.
            write(*,12) 'if_full_pres : ',if_full_pres
         endif

         write(*,*) ' '
         if (test_pass) then
            write(*,*) 'PASSED'
         else
            write(*,*) 'FAILED'
            ierr = ierr + 1
         endif
         write(*,*) ' '
      endif

c     multiple files double precision with byte swap
      test_pass = .true.
      if (NIO.eq.0) then
         write(*,*) ' '
         write(*,*) 'Testing reading of multiple .f files'
         write(*,*) 'Testing double precision with byte swap'
         write(*,*) ' '
      endif

      if_full_pres = .false.    ! pressure writing format
      param(67) = 6.0           ! file format
      time = 0.0
      fstring ='m22io_test?.f00003'
      call load_fld(fstring)
      call fields_compare(eps8)
c     check reading options (only master)
      if (NID.eq.0) then
         if (abs(time-time_test).gt.eps8) then
            test_pass = .false.
            write(*,10) 'time      : ',time
         endif
         if (nfiler.ne.2) then
            test_pass = .false.
            write(*,11) 'nfiler    : ',nfiler
         endif
         if (nelgr.ne.nelgt) then
            test_pass = .false.
            write(*,11) 'nelgr     : ',nelgt
         endif
         if (wdsizr.ne.8) then
            test_pass = .false.
            write(*,11) 'wdsizr    : ',wdsizr
         endif
         if (.not.if_byte_sw) then
            test_pass = .false.
            write(*,12) 'if_byte_sw: ',if_byte_sw
         endif
         if (.not.ifgtim) then
            test_pass = .false.
            write(*,12) 'ifgtim    : ',ifgtim
         endif
         if (.not.ifgetx) then
            test_pass = .false.
            write(*,12) 'ifgetx    : ',ifgetx
         endif
         if (.not.ifgetxr) then
            test_pass = .false.
            write(*,12) 'ifgetxr   : ',ifgetxr
         endif
         if (.not.ifgetu) then
            test_pass = .false.
            write(*,12) 'ifgetu    : ',ifgetu
         endif
         if (.not.ifgetur) then
            test_pass = .false.
            write(*,12) 'ifgetur   : ',ifgetur
         endif
         if (.not.ifgetp) then
            test_pass = .false.
            write(*,12) 'ifgetp    : ',ifgetp
         endif
         if (.not.ifgetpr) then
            test_pass = .false.
            write(*,12) 'ifgetpr   : ',ifgetpr
         endif
         if (.not.ifgett) then
            test_pass = .false.
            write(*,12) 'ifgett    : ',ifgett
         endif
         if (.not.ifgettr) then
            test_pass = .false.
            write(*,12) 'ifgettr   : ',ifgettr
         endif
         if (.not.ifgtps(1)) then
            test_pass = .false.
            write(*,12) 'ifgtps1   : ',ifgtps(1)
         endif
         if (.not.ifgtpsr(1)) then
            test_pass = .false.
            write(*,12) 'ifgtpsr1  : ',ifgtpsr(1)
         endif
         if (.not.ifgtps(2)) then
            test_pass = .false.
            write(*,12) 'ifgtps2   : ',ifgtps(2)
         endif
         if (.not.ifgtpsr(2)) then
            test_pass = .false.
            write(*,12) 'ifgtpsr2  : ',ifgtpsr(2)
         endif
         if (if_full_pres) then
            test_pass = .false.
            write(*,12) 'if_full_pres : ',if_full_pres
         endif

         write(*,*) ' '
         if (test_pass) then
            write(*,*) 'PASSED'
         else
            write(*,*) 'FAILED'
            ierr = ierr + 1
         endif
         write(*,*) ' '
      endif
      endif
      
c     fld binary
      test_pass = .true.
      if (NIO.eq.0) then
         write(*,*) ' '
         write(*,*) 'Testing reading of .fld binary file'
         write(*,*) ' '
      endif
      if_full_pres = .false.    ! pressure writing format
      param(67) = 4.0           ! file format
      time = 0.0
      fstring='fb2io_test.fld01 '
      call load_fld(fstring)
      call fields_compare(eps4)
c     check reading options (only master)
      if (NID.eq.0) then
         if (abs(time-time_test).gt.eps4) then
            test_pass = .false.
            write(*,10) 'time      : ',time
         endif
         if (.not.ifgtim) then
            test_pass = .false.
            write(*,12) 'ifgtim    : ',ifgtim
         endif
         if (.not.ifgetx) then
            test_pass = .false.
            write(*,12) 'ifgetx    : ',ifgetx
         endif
         if (.not.ifgetu) then
            test_pass = .false.
            write(*,12) 'ifgetu    : ',ifgetu
         endif
         if (.not.ifgetp) then
            test_pass = .false.
            write(*,12) 'ifgetp    : ',ifgetp
         endif
         if (.not.ifgett) then
            test_pass = .false.
            write(*,12) 'ifgett    : ',ifgett
         endif
         if (.not.ifgtps(1)) then
            test_pass = .false.
            write(*,12) 'ifgtps1   : ',ifgtps(1)
         endif
         if (.not.ifgtps(2)) then
            test_pass = .false.
            write(*,12) 'ifgtps2   : ',ifgtps(2)
         endif
         if (if_full_pres) then
            test_pass = .false.
            write(*,12) 'if_full_pres : ',if_full_pres
         endif

         write(*,*) ' '
         if (test_pass) then
            write(*,*) 'PASSED'
         else
            write(*,*) 'FAILED'
            ierr = ierr + 1
         endif
         write(*,*) ' '
      endif

c     fld ASCII
      test_pass = .true.
      if (NIO.eq.0) then
         write(*,*) ' '
         write(*,*) 'Testing reading of .fld ASCII file'
         write(*,*) ' '
      endif
      if_full_pres = .false.    ! pressure writing format
      param(67) = -4.0          ! file format
      time = 0.0
      fstring='fa2io_test.fld01 '
      call load_fld(fstring)
      call fields_compare(eps4)
c     check reading options (only master)
      if (NID.eq.0) then
         if (abs(time-time_test).gt.eps4) then
            test_pass = .false.
            write(*,10) 'time      : ',time
         endif
         if (.not.ifgtim) then
            test_pass = .false.
            write(*,12) 'ifgtim    : ',ifgtim
         endif
         if (.not.ifgetx) then
            test_pass = .false.
            write(*,12) 'ifgetx    : ',ifgetx
         endif
         if (.not.ifgetu) then
            test_pass = .false.
            write(*,12) 'ifgetu    : ',ifgetu
         endif
         if (.not.ifgetp) then
            test_pass = .false.
            write(*,12) 'ifgetp    : ',ifgetp
         endif
         if (.not.ifgett) then
            test_pass = .false.
            write(*,12) 'ifgett    : ',ifgett
         endif
         if (.not.ifgtps(1)) then
            test_pass = .false.
            write(*,12) 'ifgtps1   : ',ifgtps(1)
         endif
         if (.not.ifgtps(2)) then
            test_pass = .false.
            write(*,12) 'ifgtps2   : ',ifgtps(2)
         endif
         if (if_full_pres) then
            test_pass = .false.
            write(*,12) 'if_full_pres : ',if_full_pres
         endif

         write(*,*) ' '
         if (test_pass) then
            write(*,*) 'PASSED'
         else
            write(*,*) 'FAILED'
            ierr = ierr + 1
         endif
         write(*,*) ' '
      endif

 10   format ('ERROR: param ',a12,E15.7)
 11   format ('ERROR: param ',a12,I10)
 12   format ('ERROR: param ',a12,L1)
      
      return
      end
c-----------------------------------------------------------------------
c     Writing and reading tests for mpiio
      subroutine write_read_mpiio_file_test(ifile,eps4,eps8,ierr)
      include 'SIZE'            !
      include 'INPUT'           ! PARAM, NPSCAL
      include 'TSTEP'           ! ISTEP, PI, IF_FULL_PRES
      include 'RESTART'
      include 'PARALLEL'

c     argument list
      integer ifile,il
      real eps4, eps8

c     local variables
      logical test_pass
      real time_test
      character*132 fstring
      character*5 nstring
      
      time_test = pi
      
c     mpiio single precision
      test_pass = .true.
      if (NIO.eq.0) then
         write(*,*) ' '
         write(*,*) 'Testing writing/reading of single .f file'
         write(*,*) 'Testing single precision'
         write(*,*) ' '
      endif
      if_full_pres = .false.    ! pressure writing format
      param(63) = 0.0           ! single precision
      param(65) = 1.0           ! number of files
      param(66) = 6.0           ! file format
      time = time_test
      call fields_restore
      call prepost (.true.,'   ')
      ifile = ifile +1

      if_full_pres = .false.    ! pressure writing format
      param(67) = 6.0           ! file format
      time = 0.0
      write(nstring,'(i5.5)') ifile
      fstring='io_test0.f'//nstring
      call load_fld(fstring)
      call fields_compare(eps4)
c     check reading options (only master)
      if (NID.eq.0) then
         if (abs(time-time_test).gt.eps8) then
            test_pass = .false.
            write(*,10) 'time      : ',time
         endif
c     for mpiio number of files is equal number of processes
         if (nfiler.ne.np) then
            test_pass = .false.
            write(*,11) 'nfiler    : ',nfiler
         endif
         if (nelgr.ne.nelgt) then
            test_pass = .false.
            write(*,11) 'nelgr     : ',nelgt
         endif
         if (wdsizr.ne.4) then
            test_pass = .false.
            write(*,11) 'wdsizr    : ',wdsizr
         endif
         if (if_byte_sw) then
            test_pass = .false.
            write(*,12) 'if_byte_sw: ',if_byte_sw
         endif
         if (.not.ifgtim) then
            test_pass = .false.
            write(*,12) 'ifgtim    : ',ifgtim
         endif
         if (.not.ifgetx) then
            test_pass = .false.
            write(*,12) 'ifgetx    : ',ifgetx
         endif
         if (.not.ifgetxr) then
            test_pass = .false.
            write(*,12) 'ifgetxr   : ',ifgetxr
         endif
         if (.not.ifgetu) then
            test_pass = .false.
            write(*,12) 'ifgetu    : ',ifgetu
         endif
         if (.not.ifgetur) then
            test_pass = .false.
            write(*,12) 'ifgetur   : ',ifgetur
         endif
         if (.not.ifgetp) then
            test_pass = .false.
            write(*,12) 'ifgetp    : ',ifgetp
         endif
         if (.not.ifgetpr) then
            test_pass = .false.
            write(*,12) 'ifgetpr   : ',ifgetpr
         endif
         if (.not.ifgett) then
            test_pass = .false.
            write(*,12) 'ifgett    : ',ifgett
         endif
         if (.not.ifgettr) then
            test_pass = .false.
            write(*,12) 'ifgettr   : ',ifgettr
         endif
         if (.not.ifgtps(1)) then
            test_pass = .false.
            write(*,12) 'ifgtps1   : ',ifgtps(1)
         endif
         if (.not.ifgtpsr(1)) then
            test_pass = .false.
            write(*,12) 'ifgtpsr1  : ',ifgtpsr(1)
         endif
         if (.not.ifgtps(2)) then
            test_pass = .false.
            write(*,12) 'ifgtps2   : ',ifgtps(2)
         endif
         if (.not.ifgtpsr(2)) then
            test_pass = .false.
            write(*,12) 'ifgtpsr2  : ',ifgtpsr(2)
         endif
         if (if_full_pres) then
            test_pass = .false.
            write(*,12) 'if_full_pres : ',if_full_pres
         endif

         write(*,*) ' '
         if (test_pass) then
            write(*,*) 'PASSED'
         else
            write(*,*) 'FAILED'
            ierr = ierr + 1
         endif
         write(*,*) ' '
      endif

c     check string restart options
      test_pass = .true.
      if (NIO.eq.0) then
         write(*,*) ' '
         write(*,*) 'Testing reading of single .f file'
         write(*,*) 'Testing restart flags'
         write(*,*) ' '
      endif
      if_full_pres = .false.    ! pressure writing format
      param(67) = 6.0           ! file format
      time = 0.0
      write(nstring,'(i5.5)') ifile
      call blank  (initc(1),132)
      initc(1)='io_test0.f'//nstring//' U S1 TIME=5.0'
      call setics
      call fields_compare(eps4)
c     check reading options (only master)
      if (NID.eq.0) then
         if (abs(time-5.0).gt.eps8) then
            test_pass = .false.
            write(*,10) 'time      : ',time
         endif
c     for mpiio number of files is equal number of processes
         if (nfiler.ne.np) then
            test_pass = .false.
            write(*,11) 'nfiler    : ',nfiler
         endif
         if (nelgr.ne.nelgt) then
            test_pass = .false.
            write(*,11) 'nelgr     : ',nelgt
         endif
         if (wdsizr.ne.4) then
            test_pass = .false.
            write(*,11) 'wdsizr    : ',wdsizr
         endif
         if (if_byte_sw) then
            test_pass = .false.
            write(*,12) 'if_byte_sw: ',if_byte_sw
         endif
         if (ifgtim) then
            test_pass = .false.
            write(*,12) 'ifgtim    : ',ifgtim
         endif
         if (ifgetx) then
            test_pass = .false.
            write(*,12) 'ifgetx    : ',ifgetx
         endif
         if (.not.ifgetxr) then
            test_pass = .false.
            write(*,12) 'ifgetxr   : ',ifgetxr
         endif
         if (.not.ifgetu) then
            test_pass = .false.
            write(*,12) 'ifgetu    : ',ifgetu
         endif
         if (.not.ifgetur) then
            test_pass = .false.
            write(*,12) 'ifgetur   : ',ifgetur
         endif
         if (ifgetp) then
            test_pass = .false.
            write(*,12) 'ifgetp    : ',ifgetp
         endif
         if (.not.ifgetpr) then
            test_pass = .false.
            write(*,12) 'ifgetpr   : ',ifgetpr
         endif
         if (ifgett) then
            test_pass = .false.
            write(*,12) 'ifgett    : ',ifgett
         endif
         if (.not.ifgettr) then
            test_pass = .false.
            write(*,12) 'ifgettr   : ',ifgettr
         endif
         if (.not.ifgtps(1)) then
            test_pass = .false.
            write(*,12) 'ifgtps1   : ',ifgtps(1)
         endif
         if (.not.ifgtpsr(1)) then
            test_pass = .false.
            write(*,12) 'ifgtpsr1  : ',ifgtpsr(1)
         endif
         if (ifgtps(2)) then
            test_pass = .false.
            write(*,12) 'ifgtps2   : ',ifgtps(2)
         endif
         if (.not.ifgtpsr(2)) then
            test_pass = .false.
            write(*,12) 'ifgtpsr2  : ',ifgtpsr(2)
         endif
         if (if_full_pres) then
            test_pass = .false.
            write(*,12) 'if_full_pres',if_full_pres
         endif

         write(*,*) ' '
         if (test_pass) then
            write(*,*) 'PASSED'
         else
            write(*,*) 'FAILED'
            ierr = ierr + 1
         endif
         write(*,*) ' '
      endif
      
c     mpiio double precision
      test_pass = .true.
      if (NIO.eq.0) then
         write(*,*) ' '
         write(*,*) 'Testing writing/reading of single .f file'
         write(*,*) 'Testing double precision'
         write(*,*) ' '
      endif
      if_full_pres = .true.     ! pressure writing format
      param(63) = 1.0           ! double precision
      param(65) = 1.0           ! number of files
      param(66) = 6.0           ! file format
      time = time_test
      call fields_restore
      call prepost (.true.,'   ')
      ifile = ifile +1

      if_full_pres = .false.    ! pressure writing format
      param(67) = 6.0           ! file format
      time = 0.0
      write(nstring,'(i5.5)') ifile
      fstring='io_test0.f'//nstring
      call load_fld(fstring)
      call fields_compare(eps8)
c     check reading options (only master)
      if (NID.eq.0) then
         if (abs(time-time_test).gt.eps8) then
            test_pass = .false.
            write(*,10) 'time      : ',time
         endif
c     for mpiio number of files is equal number of processes
         if (nfiler.ne.np) then
            test_pass = .false.
            write(*,11) 'nfiler    : ',nfiler
         endif
         if (nelgr.ne.nelgt) then
            test_pass = .false.
            write(*,11) 'nelgr     : ',nelgt
         endif
         if (wdsizr.ne.8) then
            test_pass = .false.
            write(*,11) 'wdsizr    : ',wdsizr
         endif
         if (if_byte_sw) then
            test_pass = .false.
            write(*,12) 'if_byte_sw: ',if_byte_sw
         endif
         if (.not.ifgtim) then
            test_pass = .false.
            write(*,12) 'ifgtim    : ',ifgtim
         endif
         if (.not.ifgetx) then
            test_pass = .false.
            write(*,12) 'ifgetx    : ',ifgetx
         endif
         if (.not.ifgetxr) then
            test_pass = .false.
            write(*,12) 'ifgetxr   : ',ifgetxr
         endif
         if (.not.ifgetu) then
            test_pass = .false.
            write(*,12) 'ifgetu    : ',ifgetu
         endif
         if (.not.ifgetur) then
            test_pass = .false.
            write(*,12) 'ifgetur   : ',ifgetur
         endif
         if (.not.ifgetp) then
            test_pass = .false.
            write(*,12) 'ifgetp    : ',ifgetp
         endif
         if (.not.ifgetpr) then
            test_pass = .false.
            write(*,12) 'ifgetpr   : ',ifgetpr
         endif
         if (.not.ifgett) then
            test_pass = .false.
            write(*,12) 'ifgett    : ',ifgett
         endif
         if (.not.ifgettr) then
            test_pass = .false.
            write(*,12) 'ifgettr   : ',ifgettr
         endif
         if (.not.ifgtps(1)) then
            test_pass = .false.
            write(*,12) 'ifgtps1   : ',ifgtps(1)
         endif
         if (.not.ifgtpsr(1)) then
            test_pass = .false.
            write(*,12) 'ifgtpsr1  : ',ifgtpsr(1)
         endif
         if (.not.ifgtps(2)) then
            test_pass = .false.
            write(*,12) 'ifgtps2   : ',ifgtps(2)
         endif
         if (.not.ifgtpsr(2)) then
            test_pass = .false.
            write(*,12) 'ifgtpsr2  : ',ifgtpsr(2)
         endif
         if (.not.if_full_pres) then
            test_pass = .false.
            write(*,12) 'if_full_pres : ',if_full_pres
         endif

         write(*,*) ' '
         if (test_pass) then
            write(*,*) 'PASSED'
         else
            write(*,*) 'FAILED'
            ierr = ierr + 1
         endif
         write(*,*) ' '
      endif
      
 10   format ('ERROR: param ',a12,E15.7)
 11   format ('ERROR: param ',a12,I10)
 12   format ('ERROR: param ',a12,L1)
      
      return
      end
c-----------------------------------------------------------------------
c     Writing and reading tests for multiple files
      subroutine write_read_multipe_file_test(ifile,eps4,eps8,ierr)
      include 'SIZE'            ! 
      include 'INPUT'           ! PARAM, NPSCAL
      include 'TSTEP'           ! ISTEP, PI, IF_FULL_PRES
      include 'RESTART'
      include 'PARALLEL'

c     argument list
      integer ifile
      real eps4, eps8

c     local variables
      logical test_pass
      real time_test
      character*132 fstring
      character*5 nstring
      
      time_test = pi

c     multiple file single precision
      test_pass = .true.
      if (NIO.eq.0) then
         write(*,*) ' '
         write(*,*) 'Testing writing/reading of multiple .f files'
         write(*,*) 'Testing single precision'
         write(*,*) ' '
      endif
      if_full_pres = .false.    ! pressure writing format
      param(63) = 0.0           ! single precision
      param(65) = 2.0           ! number of files
      param(66) = 6.0           ! file format
      time = time_test
      call fields_restore
      call prepost (.true.,'   ')
      ifile = ifile +1

      if_full_pres = .false.    ! pressure writing format
      param(67) = 6.0           ! file format
      time = 0.0
      write(nstring,'(i5.5)') ifile
      fstring='io_test?.f'//nstring
      call load_fld(fstring)
      call fields_compare(eps4)
c     check reading options (only master)
      if (NID.eq.0) then
         if (abs(time-time_test).gt.eps8) then
            test_pass = .false.
            write(*,10) 'time      : ',time
         endif
         if (nfiler.ne.2) then
            test_pass = .false.
            write(*,11) 'nfiler    : ',nfiler
         endif
         if (nelgr.ne.nelgt) then
            test_pass = .false.
            write(*,11) 'nelgr     : ',nelgt
         endif
         if (wdsizr.ne.4) then
            test_pass = .false.
            write(*,11) 'wdsizr    : ',wdsizr
         endif
         if (if_byte_sw) then
            test_pass = .false.
            write(*,12) 'if_byte_sw: ',if_byte_sw
         endif
         if (.not.ifgtim) then
            test_pass = .false.
            write(*,12) 'ifgtim    : ',ifgtim
         endif
         if (.not.ifgetx) then
            test_pass = .false.
            write(*,12) 'ifgetx    : ',ifgetx
         endif
         if (.not.ifgetxr) then
            test_pass = .false.
            write(*,12) 'ifgetxr   : ',ifgetxr
         endif
         if (.not.ifgetu) then
            test_pass = .false.
            write(*,12) 'ifgetu    : ',ifgetu
         endif
         if (.not.ifgetur) then
            test_pass = .false.
            write(*,12) 'ifgetur   : ',ifgetur
         endif
         if (.not.ifgetp) then
            test_pass = .false.
            write(*,12) 'ifgetp    : ',ifgetp
         endif
         if (.not.ifgetpr) then
            test_pass = .false.
            write(*,12) 'ifgetpr   : ',ifgetpr
         endif
         if (.not.ifgett) then
            test_pass = .false.
            write(*,12) 'ifgett    : ',ifgett
         endif
         if (.not.ifgettr) then
            test_pass = .false.
            write(*,12) 'ifgettr   : ',ifgettr
         endif
         if (.not.ifgtps(1)) then
            test_pass = .false.
            write(*,12) 'ifgtps1   : ',ifgtps(1)
         endif
         if (.not.ifgtpsr(1)) then
            test_pass = .false.
            write(*,12) 'ifgtpsr1  : ',ifgtpsr(1)
         endif
         if (.not.ifgtps(2)) then
            test_pass = .false.
            write(*,12) 'ifgtps2   : ',ifgtps(2)
         endif
         if (.not.ifgtpsr(2)) then
            test_pass = .false.
            write(*,12) 'ifgtpsr2  : ',ifgtpsr(2)
         endif
         if (if_full_pres) then
            test_pass = .false.
            write(*,12) 'if_full_pres : ',if_full_pres
         endif

         write(*,*) ' '
         if (test_pass) then
            write(*,*) 'PASSED'
         else
            write(*,*) 'FAILED'
            ierr = ierr + 1
         endif
         write(*,*) ' '
      endif
      
c     multiple files double precision
      test_pass = .true.
      if (NIO.eq.0) then
         write(*,*) ' '
         write(*,*) 'Testing writing/reading of multiple .f files'
         write(*,*) 'Testing double precision'
         write(*,*) ' '
      endif
      if_full_pres = .true.     ! pressure writing format
      param(63) = 1.0           ! double precision
      param(65) = 2.0           ! number of files
      param(66) = 6.0           ! file format
      time = time_test
      call fields_restore
      call prepost (.true.,'   ')
      ifile = ifile +1

      if_full_pres = .false.    ! pressure writing format
      param(67) = 6.0           ! file format
      time = 0.0
      write(nstring,'(i5.5)') ifile
      fstring='io_test?.f'//nstring
      call load_fld(fstring)
      call fields_compare(eps8)
c     check reading options (only master)
      if (NID.eq.0) then
         if (abs(time-time_test).gt.eps8) then
            test_pass = .false.
            write(*,10) 'time      : ',time
         endif
         if (nfiler.ne.2) then
            test_pass = .false.
            write(*,11) 'nfiler    : ',nfiler
         endif
         if (nelgr.ne.nelgt) then
            test_pass = .false.
            write(*,11) 'nelgr     : ',nelgt
         endif
         if (wdsizr.ne.8) then
            test_pass = .false.
            write(*,11) 'wdsizr    : ',wdsizr
         endif
         if (if_byte_sw) then
            test_pass = .false.
            write(*,12) 'if_byte_sw: ',if_byte_sw
         endif
         if (.not.ifgtim) then
            test_pass = .false.
            write(*,12) 'ifgtim    : ',ifgtim
         endif
         if (.not.ifgetx) then
            test_pass = .false.
            write(*,12) 'ifgetx    : ',ifgetx
         endif
         if (.not.ifgetxr) then
            test_pass = .false.
            write(*,12) 'ifgetxr   : ',ifgetxr
         endif
         if (.not.ifgetu) then
            test_pass = .false.
            write(*,12) 'ifgetu    : ',ifgetu
         endif
         if (.not.ifgetur) then
            test_pass = .false.
            write(*,12) 'ifgetur   : ',ifgetur
         endif
         if (.not.ifgetp) then
            test_pass = .false.
            write(*,12) 'ifgetp    : ',ifgetp
         endif
         if (.not.ifgetpr) then
            test_pass = .false.
            write(*,12) 'ifgetpr   : ',ifgetpr
         endif
         if (.not.ifgett) then
            test_pass = .false.
            write(*,12) 'ifgett    : ',ifgett
         endif
         if (.not.ifgettr) then
            test_pass = .false.
            write(*,12) 'ifgettr   : ',ifgettr
         endif
         if (.not.ifgtps(1)) then
            test_pass = .false.
            write(*,12) 'ifgtps1   : ',ifgtps(1)
         endif
         if (.not.ifgtpsr(1)) then
            test_pass = .false.
            write(*,12) 'ifgtpsr1  : ',ifgtpsr(1)
         endif
         if (.not.ifgtps(2)) then
            test_pass = .false.
            write(*,12) 'ifgtps2   : ',ifgtps(2)
         endif
         if (.not.ifgtpsr(2)) then
            test_pass = .false.
            write(*,12) 'ifgtpsr2  : ',ifgtpsr(2)
         endif
         if (.not.if_full_pres) then
            test_pass = .false.
            write(*,12) 'if_full_pres : ',if_full_pres
         endif

         write(*,*) ' '
         if (test_pass) then
            write(*,*) 'PASSED'
         else
            write(*,*) 'FAILED'
            ierr = ierr + 1
         endif
         write(*,*) ' '
      endif
      
 10   format ('ERROR: param ',a12,E15.7)
 11   format ('ERROR: param ',a12,I10)
 12   format ('ERROR: param ',a12,L1)
      
      return
      end
c-----------------------------------------------------------------------
c     Writing and reading tests for fld binary files
      subroutine write_read_fld_file_test(ifile,eps4,eps8,ierr)
      include 'SIZE'            !
      include 'INPUT'           ! PARAM, NPSCAL
      include 'TSTEP'           ! ISTEP, PI, IF_FULL_PRES
      include 'RESTART'
      include 'PARALLEL'

c     argument list
      integer ifile
      real eps4, eps8

c     local variables
      logical test_pass
      real time_test
      character*132 fstring
      character*2 nstring
      
      time_test = pi

c     fld binary
      test_pass = .true.
      if (NIO.eq.0) then
         write(*,*) ' '
         write(*,*) 'Testing writing/reading of binary .fld file'
         write(*,*) ' '
      endif
      if_full_pres = .false.    ! pressure writing format
      param(63) = 0.0           ! single precision
      param(65) = 1.0           ! number of files
      param(66) = 4.0           ! file format
      time = time_test
      call fields_restore
      call prepost (.true.,'   ')
      ifile = ifile +1

      if_full_pres = .false.    ! pressure writing format
      param(67) = 4.0           ! file format
      time = 0.0
      write(nstring,'(i2.2)') ifile
      fstring='io_test.fld'//nstring
      call load_fld(fstring)
      call fields_compare(eps4)
c     check reading options (only master)
      if (NID.eq.0) then
         if (abs(time-time_test).gt.eps4) then
            test_pass = .false.
            write(*,10) 'time      : ',time
         endif
         if (.not.ifgtim) then
            test_pass = .false.
            write(*,12) 'ifgtim    : ',ifgtim
         endif
         if (.not.ifgetx) then
            test_pass = .false.
            write(*,12) 'ifgetx    : ',ifgetx
         endif
         if (.not.ifgetu) then
            test_pass = .false.
            write(*,12) 'ifgetu    : ',ifgetu
         endif
         if (.not.ifgetp) then
            test_pass = .false.
            write(*,12) 'ifgetp    : ',ifgetp
         endif
         if (.not.ifgett) then
            test_pass = .false.
            write(*,12) 'ifgett    : ',ifgett
         endif
         if (.not.ifgtps(1)) then
            test_pass = .false.
            write(*,12) 'ifgtps1   : ',ifgtps(1)
         endif
         if (.not.ifgtps(2)) then
            test_pass = .false.
            write(*,12) 'ifgtps2   : ',ifgtps(2)
         endif
         if (if_full_pres) then
            test_pass = .false.
            write(*,12) 'if_full_pres : ',if_full_pres
         endif

         write(*,*) ' '
         if (test_pass) then
            write(*,*) 'PASSED'
         else
            write(*,*) 'FAILED'
            ierr = ierr + 1
         endif
         write(*,*) ' '
      endif
      
c     fld ascii
      test_pass = .true.
      if (NIO.eq.0) then
         write(*,*) ' '
         write(*,*) 'Testing writing/reading of ASCII .fld file'
         write(*,*) ' '
      endif
      if_full_pres = .false.    ! pressure writing format
      param(63) = 0.0           ! single precision
      param(65) = 1.0           ! number of files
      param(66) = -4.0          ! file format
      time = time_test
      call fields_restore
      call prepost (.true.,'   ')
      ifile = ifile +1

      if_full_pres = .false.    ! pressure writing format
      param(67) = -4.0          ! file format
      time = 0.0
      write(nstring,'(i2.2)') ifile
      fstring='io_test.fld'//nstring
      call load_fld(fstring)
      call fields_compare(eps4)
c     check reading options (only master)
      if (NID.eq.0) then
         if (abs(time-time_test).gt.eps4) then
            test_pass = .false.
            write(*,10) 'time      : ',time
         endif
         if (.not.ifgtim) then
            test_pass = .false.
            write(*,12) 'ifgtim    : ',ifgtim
         endif
         if (.not.ifgetx) then
            test_pass = .false.
            write(*,12) 'ifgetx    : ',ifgetx
         endif
         if (.not.ifgetu) then
            test_pass = .false.
            write(*,12) 'ifgetu    : ',ifgetu
         endif
         if (.not.ifgetp) then
            test_pass = .false.
            write(*,12) 'ifgetp    : ',ifgetp
         endif
         if (.not.ifgett) then
            test_pass = .false.
            write(*,12) 'ifgett    : ',ifgett
         endif
         if (.not.ifgtps(1)) then
            test_pass = .false.
            write(*,12) 'ifgtps1   : ',ifgtps(1)
         endif
         if (.not.ifgtps(2)) then
            test_pass = .false.
            write(*,12) 'ifgtps2   : ',ifgtps(2)
         endif
         if (if_full_pres) then
            test_pass = .false.
            write(*,12) 'if_full_pres : ',if_full_pres
         endif

         write(*,*) ' '
         if (test_pass) then
            write(*,*) 'PASSED'
         else
            write(*,*) 'FAILED'
            ierr = ierr + 1
         endif
         write(*,*) ' '
      endif
      
 10   format ('ERROR: param ',a12,E15.7)
 11   format ('ERROR: param ',a12,I10)
 12   format ('ERROR: param ',a12,L1)
      
      return
      end
c-----------------------------------------------------------------------
c     gfldr reading test
      subroutine read_gfldr_test(eps4,eps8,eps_map,ierr)
      include 'SIZE'            !
      include 'INPUT'           ! PARAM, NPSCAL
      include 'TSTEP'           ! ISTEP, PI, IF_FULL_PRES
      include 'RESTART'
      include 'PARALLEL'

c     argument list
      real eps4,eps8,eps_map
      
c     local variables
      logical test_pass
      real time_test
      character*132 fstring
      
      time_test = pi

c     mpiio
      test_pass = .true.
      if (NIO.eq.0) then
         write(*,*) ' '
         write(*,*) 'Testing gfldr reading of single .f file'
         write(*,*) ' '
      endif
      if_full_pres = .false.    ! pressure writing format
      param(67) = 6.0           ! file format
      time = 0.0
      fstring='m12io_test0.f00001 '
      call gfldr(fstring)
      call fields_compare(eps4)
c     check reading options (only master)
      if (NID.eq.0) then
         if (abs(time-time_test).gt.eps8) then
            test_pass = .false.
            write(*,10) 'time      : ',time
         endif
c     for mpiio number of files is equal number of processes
         if (nelgr.ne.nelgt) then
            test_pass = .false.
            write(*,11) 'nelgr     : ',nelgr
         endif
         if (wdsizr.ne.4) then
            test_pass = .false.
            write(*,11) 'wdsizr    : ',wdsizr
         endif
         if (if_byte_sw) then
            test_pass = .false.
            write(*,12) 'if_byte_sw: ',if_byte_sw
         endif
         if (.not.ifgtim) then
            test_pass = .false.
            write(*,12) 'ifgtim    : ',ifgtim
         endif

         if (.not.ifgetxr) then
            test_pass = .false.
            write(*,12) 'ifgetxr   : ',ifgetxr
         endif
         if (.not.ifgetur) then
            test_pass = .false.
            write(*,12) 'ifgetur   : ',ifgetur
         endif
         if (.not.ifgetpr) then
            test_pass = .false.
            write(*,12) 'ifgetpr   : ',ifgetpr
         endif
         if (.not.ifgettr) then
            test_pass = .false.
            write(*,12) 'ifgettr   : ',ifgettr
         endif
         if (.not.ifgtpsr(1)) then
            test_pass = .false.
            write(*,12) 'ifgtpsr1  : ',ifgtpsr(1)
         endif
         if (.not.ifgtpsr(2)) then
            test_pass = .false.
            write(*,12) 'ifgtpsr2  : ',ifgtpsr(2)
         endif
         if (if_full_pres) then
            test_pass = .false.
            write(*,12) 'if_full_pres : ',if_full_pres
         endif

         write(*,*) ' '
         if (test_pass) then
            write(*,*) 'PASSED'
         else
            write(*,*) 'FAILED'
            ierr = ierr + 1
         endif
         write(*,*) ' '
      endif

 10   format ('ERROR: param ',a12,E15.7)
 11   format ('ERROR: param ',a12,I10)
 12   format ('ERROR: param ',a12,L1)
      
      return
      end
c-----------------------------------------------------------------------
