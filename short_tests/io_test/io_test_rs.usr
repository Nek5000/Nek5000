c-----------------------------------------------------------------------
      subroutine uservp (ix,iy,iz,ieg)
      include 'SIZE'
      include 'TOTAL'
      include 'NEKUSE'          ! UDIFF, UTRANS

      integer e

      e = gllel(ieg)

      udiff  = 2 + t(ix,iy,iz,e,1)
      utrans = 1

      return
      end
c-----------------------------------------------------------------------
      subroutine userf  (ix,iy,iz,ieg)
      include 'SIZE'
      include 'NEKUSE'          ! FF[XYZ]
      
      ffx = 0.0
      ffy = 0.0
      ffz = 0.0
      
      return
      end
c-----------------------------------------------------------------------
      subroutine userq  (ix,iy,iz,ieg)
      include 'SIZE'
      include 'NEKUSE'          ! QVOL

      qvol   = 0.0

      return
      end
c-----------------------------------------------------------------------
      subroutine userchk
      include 'SIZE'
      include 'TOTAL'

      character*80 fnames(3)

      if (int(uparam(1)).ne.0) then
         call blank(fnames,size(fnames)*80)
         fnames(1) ='rs_io_test_rs0.f00001'
         fnames(2) ='rs_io_test_rs0.f00002'
         fnames(3) ='rs_io_test_rs0.f00003'
         if (PARAM(27).lt.0) then
            nfiles = NBDINP
         else
            nfiles = 3
         endif
         call full_restart(fnames,nfiles) ! replace istep=0,1,..
      endif

      iostep_full = iostep
      call full_restart_save(iostep_full)

      return
      end
c-----------------------------------------------------------------------
      subroutine userbc (ix,iy,iz,iside,ieg)

      include 'SIZE'
      include 'NEKUSE'          ! UX, UY, UZ, TEMP, X, Y

      UX = 0.0
      UY = 0.0
      UZ = 0.0
      TEMP = 0.0

      return
      end
c-----------------------------------------------------------------------
      subroutine useric (ix,iy,iz,ieg)

      include 'SIZE'
      include 'NEKUSE'          ! UX, UY, UZ, TEMP, Z
      include 'INPUT'           ! IF3D, IFLDMHD
      include 'TSTEP'           ! PI, IFIELD

c     it is small mesh with cylindrical hole in the middle
      if (ifield.eq.1) then
         ux = ux*sin(z*pi)
         uy = uy*cos(z*pi)
         uz = z*z*sin(x*pi)*cos(3.0*y*pi)
      elseif (ifield.ne.ifldmhd) then
         temp = r*cos(ifield*theta)
      endif
      
      return
      end
c-----------------------------------------------------------------------
c     This routine to modify element vertices
      subroutine usrdat
      include 'SIZE'
      include 'TOTAL'

      ifxyo = .false.
      if_full_pres = .true.

      return
      end
c-----------------------------------------------------------------------
      subroutine usrdat2
      include 'SIZE'
      include 'TOTAL'

      return
      end
c-----------------------------------------------------------------------
      subroutine usrdat3
      include 'SIZE'
      include 'TOTAL'

      if (nsteps.eq.0) then
         call check
         call exitt
      endif

      return
      end
c-----------------------------------------------------------------------
      subroutine check()
      include 'SIZE'
      include 'TOTAL'

      real wk1(lx1*ly1*lz1*lelt,4)
      real wk2(lx2*ly2*lz2*lelt)

      nxyz1 = nx1*ny1*nz1
      nxyz2 = nx2*ny2*nz2

      call rzero(wk1,size(wk1))
      call rzero(wk2,size(wk2))

      call load_fld('ref.fld')
      call copy(wk1(1,1),vx,nxyz1*nelv)
      call copy(wk1(1,2),vy,nxyz1*nelv)
      call copy(wk1(1,3),vz,nxyz1*nelv)
      call copy(wk1(1,4), t,nxyz1*nelv)
      call copy(wk2     ,pr,nxyz2*nelv)

      call load_fld('out.fld')
      do i = 1,nxyz1*nelv
         wk1(i,1) = (vx(i,1,1,1)  - wk1(i,1)) / wk1(i,1)
         wk1(i,2) = (vy(i,1,1,1)  - wk1(i,2)) / wk1(i,2)
         wk1(i,3) = (vz(i,1,1,1)  - wk1(i,3)) / wk1(i,3)
         wk1(i,4) = (t(i,1,1,1,1) - wk1(i,4)) / wk1(i,4)
      enddo
      do i = 1,nxyz2*nelv
         wk2(i) = (pr(i,1,1,1) - wk2(i)) / wk2(i)
      enddo

      ddmax = 0.0
      ddmax = max(ddmax,glamax(wk2,nxyz2*nelv))
      ddmax = max(ddmax,glamax(wk1,size(wk1)))
      if (nid.eq.0) write(6,*) 'err max:', ddmax

c      call outpost(wk1(1,1),wk1(1,2),wk1(1,3),
c     $             wk2,wk1(1,4),'tst')

      return
      end
