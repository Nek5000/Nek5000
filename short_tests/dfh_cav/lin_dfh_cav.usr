c-----------------------------------------------------------------------
c
c     This is small 2D example of the linear direct and adjoint simulation
c     of differentially heated square cavity. The linear stability of natural
c     convection is tested and the grow rate of one of the modes is compared
c     with the result of the linear stability analysis.
c     This simulation tests temperature adjoint.
c
c-----------------------------------------------------------------------
c
c     .Blasius I.C. and B.C.
c
c-----------------------------------------------------------------------
      subroutine uservp (ix,iy,iz,ieg)
      include 'SIZE'
      include 'NEKUSE'          ! UDIFF, UTRANS
      include 'INPUT'           ! UPARAM
      include 'ADJOINT'         ! IFADJ
      include 'TSTEP'           ! TSTEP

c     argument list
      integer ix, iy, iz, ieg

c     local variables
      real Pr_,Ra_

c     decide the non dimensionalization of the equations
      Pr_ = abs(UPARAM(2))
      Ra_ = abs(UPARAM(3))
c     set the coefficients
c     adjoint problem
      if (IFADJ) then
         if (IFIELD.eq.1) then     !     momentum equations
            UTRANS = 1.0
            UDIFF  = Pr_/sqrt(Ra_)
         elseif (IFIELD.eq.2) then !     temperature equation
            UTRANS = 1.0
            UDIFF  = 1./sqrt(Ra_)
         endif
c     direct problem
      else
         if (IFIELD.eq.1) then     !     momentum equations
            UTRANS = 1./Pr_
            UDIFF  = 1./sqrt(Ra_)
         elseif (IFIELD.eq.2) then !     temperature equation
            UTRANS = 1.0
            UDIFF  = 1./sqrt(Ra_)
         endif
      endif

      return
      end
c-----------------------------------------------------------------------
      subroutine userf  (ix,iy,iz,ieg)
      include 'SIZE'
      include 'NEKUSE'          ! FF[XYZ]
      include 'PARALLEL'        ! GLLEL
      include 'SOLN'            ! VTRANS,TP
      include 'INPUT'           ! IF3D
      include 'ADJOINT'         ! IFADJ, G_ADJ

c     argument list
      integer ix,iy,iz,ieg
      
c     local variable
      integer ip,iel
      real rtmp

c     local element number
      iel=GLLEL(ieg)
c     initialize the forcing to zero
      FFX = 0.0
      FFY = 0.0
      if (IF3D) FFZ = 0.0
c     compute the corresponding index in the pertubation arrays
      ip=ix+NX1*(iy-1+NY1*(iz-1+NZ1*(iel-1)))
c     forcing for the direct run is the buoyancy expressed in terms of
c     Boussinesq approximation 
      if (.not.IFADJ) then
         rtmp = TP(ip,1,1)/VTRANS(ix,iy,iz,iel,1)
         FFX = FFX + G_ADJ(1)*rtmp
         FFY = FFY + G_ADJ(2)*rtmp
         if (IF3D) FFZ = FFZ + G_ADJ(3)*rtmp
      endif

      return
      end
c-----------------------------------------------------------------------
      subroutine userq  (ix,iy,iz,ieg)
      include 'SIZE'
      include 'NEKUSE'          ! QVOL
      include 'PARALLEL'        ! GLLEL
      include 'SOLN'            ! VTRANS,V[XYZ]P
      include 'INPUT'           ! IF3D
      include 'ADJOINT'         ! IFADJ, G_ADJ, BETA_B

c     argument list
      integer ix,iy,iz,ieg
      
c     local variable
      integer ip,iel
      real rtmp

c     local element number
      iel  = GLLEL(ieg)
c     initialize the forcing to zero
      QVOL = 0.0
c     compute the corresponding index in the pertubation arrays
      ip   = ix+NX1*(iy-1+NY1*(iz-1+NZ1*(iel-1)))
c     forcing for the adjoint temperature equation that depends on the
c     approximation used for the buoyancy (in theis case Boussinesq) 
      if (IFADJ) then
         QVOL = (VXP(ip,1)*G_ADJ(1)+VYP(ip,1)*G_ADJ(2)
     $        +VZP(ip,1)*G_ADJ(3))*BETA_B(ip) !const g/|g|.u
      endif

      return
      end
c-----------------------------------------------------------------------
      subroutine userchk

      include 'SIZE'            ! NX1, NY1, NZ1, NELV, NIO
      include 'INPUT'           ! UPARAM, CPFLD
      include 'TSTEP'           ! ISTEP, IOSTEP, TIME, LASTEP
      include 'SOLN'            ! V[XYZ], T, V[XYZ]P, TP, PRP
      include 'MASS'            ! BM1
      include 'ADJOINT'         ! IFADJ, G_ADJ, BETA_B, DTD[XYZ]

c     local variables
      integer n, nit
      real Pr_,Ra_
      real Ek(2),timel(2), omega(2), domega
      save EK, timel, omega
      real vtmp(lx1*ly1*lz1*lelt,ldim),ttmp(lx1*ly1*lz1*lelt)
      character*132 restartf
      real cht_glsc2_wt

      if (ISTEP.eq.0) then
c     set direct/adjoint mode and load restart field
c     keep current base flow
         call opcopy(vtmp(1,1),vtmp(1,2),vtmp(1,ndim),VX,VY,VZ)
         n = NX1*NY1*NZ1*NELV
         call copy(ttmp,T,n)

         if (IFADJ) then
            if (NIO.eq.0) write(*,*) 'Simulation in adjoint mode'
c     restart file name
            restartf = 'egvcavity_adj.restart'
         else
            if (NIO.eq.0) write(*,*) 'Simulation in direct mode'
            IFADJ = .FALSE.
c     restart file name
            restartf = 'egvcavity_dir.restart'
         endif

c     read the field
         call load_fld(restartf)
c     copy fileds
         call opcopy(VXP,VYP,VZP,VX,VY,VZ)
         n = NX1*NY1*NZ1*NELV
         call copy(TP,t,n)
         n = NX2*NY2*NZ2*NELV
         call copy(PRP,PR,n)
c     put back base flow
         call opcopy(VX,VY,VZ,vtmp(1,1),vtmp(1,2),vtmp(1,ndim))
         n = NX1*NY1*NZ1*NELV
         call copy(T,ttmp,n)
         call rzero(PR,n)
         
c     decide the non dimensionalization of the equations
         Pr_ = abs(UPARAM(2))
         Ra_ = abs(UPARAM(3))

         
c     temperature base flow gradient, needed for the extra advection
c     terms in the adjoint momentum equations
         if (IFADJ)  then
            call gradm1(DTDX,DTDY,DTDZ,T)
c     coefficient in front of the buoyancy term, depends on the
c     nondimensionalization
            call rone(BETA_B,n)
            call cmult(BETA_B,Pr_,n)
         endif

c     gravity
         G_ADJ(1) = 0.0         !x direction
         G_ADJ(2) = 1.0         !y direction
         G_ADJ(3) = 0.0         !z direction

c     set fluid properties
         if (IFADJ) then
            CPFLD(1,1)=Pr_/sqrt(Ra_)
            CPFLD(1,2)=1.0
            
            CPFLD(2,1)=1.0/sqrt(Ra_)
            CPFLD(2,2)=1.0
         else
            CPFLD(1,1)=1.0/sqrt(Ra_)
            CPFLD(1,2)=1.0/Pr_
            
            CPFLD(2,1)=1.0/sqrt(Ra_)
            CPFLD(2,2)=1.0
         endif
      endif

c     get energy
      domega = 1.0
      nit = 10!00
      if (mod(ISTEP,nit).eq.0) then
         n = NX1*NY1*NZ1*NELV
         Ek(2) = Ek(1)
         timel(2) = timel(1)
         omega(2) = omega(1)
!     Ek(1) = 0.5*(glsc3(VXP,VXP,BM1,n)+glsc3(VYP,VYP,BM1,n))
         Ek(1) = cht_glsc2_wt(VXP,VYP,VZP,TP,VXP,VYP,VZP,TP,BM1)
         timel(1) = TIME
c     get growth rate
         if (Ek(2).gt.0.0.and.timel(1).gt.timel(2)) then
            omega(1) = 0.5*log(Ek(1)/Ek(2))/(timel(1)-timel(2))
            domega = abs((omega(1)-omega(2))/omega(1))
         endif
c     set logs
         if (NIO.eq.0.and.ISTEP.gt.2*nit)
     $        write(*,*) 'Energy ',Ek(1),omega(1),domega,TIME
      endif

c     converged field
      if (ISTEP.eq.NSTEPS) then
c     write perturbation field
         call outpost2(VXP,VYP,VZP,PRP,TP,0,'prt')
      endif
      
      return
      end
c-----------------------------------------------------------------------
      subroutine userbc (ix,iy,iz,iside,eg)

      include 'SIZE'
      include 'NEKUSE'          ! UX, UY, UZ, TEMP, X, Y

c     velocity
      UX = 0.0
      UY = 0.0
      UZ = 0.0

c     temperature
      TEMP = 0.0

      return
      end
c-----------------------------------------------------------------------
      subroutine useric (ix,iy,iz,ieg)

      include 'SIZE'
      include 'NEKUSE'          ! UX, UY, UZ, TEMP, Z

      real amp, ran

c     velocity random distribution
      amp = 0.001
      
      ran = 3.e4*(ieg+X*sin(Y)) - 1.5e3*ix*iy + .5e5*ix 
      ran = 1.e3*sin(ran)
      ran = 1.e3*sin(ran)
      ran = cos(ran)
      UX  = ran*amp
         
      ran = 2.3e4*(ieg+X*sin(Y)) + 2.3e3*ix*iy - 2.e5*ix 
      ran = 1.e3*sin(ran)
      ran = 1.e3*sin(ran)
      ran = cos(ran)
      UY  = ran*amp

      UZ = 0.0
      
c     temperature random distribution
      ran = 2.e4*(ieg+x*sin(y)) + 1.e3*ix*iy + 1.e5*ix 
      ran = 1.e3*sin(ran)
      ran = 1.e3*sin(ran)
      ran = cos(ran)
      TEMP= ran*amp

      return
      end
c-----------------------------------------------------------------------
c     This routine to modify element vertices
      subroutine usrdat
      include 'SIZE'
      
      return
      end
c-----------------------------------------------------------------------
      subroutine usrdat2
      include 'SIZE'

      return
      end
c-----------------------------------------------------------------------
      subroutine usrdat3
      return
      end
c-----------------------------------------------------------------------
c     global scalar (L2 norm)
      real function cht_glsc2_wt (b1,b2,b3,b4,x1,x2,x3,x4,wt)
      implicit none

      include 'SIZE'            ! N[XYZ]1, NEL[VT]  
      include 'INPUT'           ! IFFLOW, IFHEAT, IF3D
      include 'MASS'            ! VOLVM1, VOLTM1
      
c     argument list
      real b1(1),b2(1),b3(1),b4(1),x1(1),x2(1),x3(1),x4(1),wt(1)

c     local variables
      integer ntotv, ntott
      real sum, f1, f2
      integer i
      real CHCST_SC,CHCFF_V,CHCFF_T

c     functions
      real glsum
c-----------------------------------------------------------------------
      ntotv = NX1*NY1*NZ1*NELV
      ntott = NX1*NY1*NZ1*NELT

c     default values
      CHCST_SC = 3.36558d0
      CHCFF_V = 0.5
      CHCFF_T = 0.5
      
c     scaling factor velocity vs temperature
      f1=CHCFF_V/VOLVM1
      f2=CHCFF_T*CHCST_SC/VOLTM1

      sum = 0.
      if (IFFLOW) then          !if vel
         if (IFHEAT) then       !if temp & vel
            if (IF3D) then
               do i=1,ntotv
                  sum = sum + wt(i)*(f1*(b1(i)*x1(i)+b2(i)*x2(i)
     &                 +b3(i)*x3(i))+f2*b4(i)*x4(i))
               end do
            else
               do i=1,ntotv
                  sum =sum + wt(i)*(f1*(b1(i)*x1(i)+b2(i)*x2(i))
     &                 +f2*b4(i)*x4(i))
               end do
            end if
            if (ntott.gt.ntotv) then !conjugate heat transfer
               do i=ntotv+1,ntott
                  sum = sum + wt(i)*f2*b4(i)*x4(i)
               end do
            end if
        else                   !just vel
           if (IF3D) then
              do i=1,ntotv
                 sum = sum + wt(i)*f1*(b1(i)*x1(i)+
     $                b2(i)*x2(i)+b3(i)*x3(i))
              end do
           else
              do i=1,ntotv
                 sum = sum + wt(i)*f1*(b1(i)*x1(i)+b2(i)*x2(i))
              end do
           end if
        end if
      else                      !just temp
         if (IFHEAT) then
            do i=1,ntott
               sum = sum + wt(i)*(f2*b4(i)*x4(i))
            end do
         end if
      end if
      
      cht_glsc2_wt = glsum(sum,1)
      
      return
      end
c-----------------------------------------------------------------------
